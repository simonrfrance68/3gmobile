<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Controller\Vatnumber;

use Magento\Framework\Controller\ResultFactory;
use Magento\Framework\Controller\Result\Json as JsonResult;
use Magento\Framework\Controller\Result\Raw as RawResult;
use Magento\Framework\Controller\Result\Redirect as RedirectResult;
use Magento\Framework\Exception\LocalizedException;

/**
 * Class Validation
 * @package Geissweb\Euvat\Controller\Vatnumber
 */
class Validation extends \Magento\Framework\App\Action\Action
{
    /**
     * @var \Magento\Framework\App\Action\Context
     */
    public $context;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * Validator for Formkey
     * @var \Magento\Framework\Data\Form\FormKey\Validator
     */
    protected $_formKeyValidator;

    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    private $configHelper;

    /**
     * @var \Geissweb\Euvat\Model\Validation\Vies
     */
    private $viesService;

    /**
     * Constructor
     *
     * @param \Magento\Framework\App\Action\Context          $context
     * @param \Magento\Framework\Data\Form\FormKey\Validator $formKeyValidator
     * @param \Geissweb\Euvat\Helper\Configuration           $configHelper
     * @param \Geissweb\Euvat\Model\Validation\Vies          $viesService
     * @param \Geissweb\Euvat\Logger\Logger                  $logger
     */
    public function __construct(
        \Magento\Framework\App\Action\Context $context,
        \Magento\Framework\Data\Form\FormKey\Validator $formKeyValidator,
        \Geissweb\Euvat\Helper\Configuration $configHelper,
        \Geissweb\Euvat\Model\Validation\Vies $viesService,
        \Geissweb\Euvat\Logger\Logger $logger
    ) {
        parent::__construct($context);
        $this->context = $context;
        $this->_formKeyValidator = $formKeyValidator;
        $this->configHelper = $configHelper;
        $this->viesService = $viesService;
        $this->logger = $logger;
    }

    /**
     * Execute VAT number validation
     * @return JsonResult|RawResult|RedirectResult
     */
    public function execute()
    {
        $response = [
            'errors' => true,
            'message' => ''
        ];

        /** @var \Magento\Framework\Controller\Result\Raw $resultRaw */
        $resultRaw = $this->resultFactory->create(ResultFactory::TYPE_RAW);
        if ($this->getRequest()->getMethod() !== 'POST'
            || !$this->getRequest()->isXmlHttpRequest()
            || !$this->_formKeyValidator->validate($this->getRequest())
        ) {
            $this->logger->debug("Aborting Controller: Request()->getMethod(): ".$this->getRequest()->getMethod());
            $this->logger->debug("Request()->isXmlHttpRequest(): ".$this->getRequest()->isXmlHttpRequest());
            $this->logger->debug("FormKey result: ".$this->_formKeyValidator->validate($this->getRequest()));
            return $resultRaw->setHttpResponseCode(400);
        }

        switch ($this->configHelper->getValidationService()) {
            case \Geissweb\Euvat\Model\System\Config\Source\Interfaces::BZST:
                $service = false;
                break;
            case \Geissweb\Euvat\Model\System\Config\Source\Interfaces::VIES:
            default:
                $service = $this->viesService;
                break;
        }

        $vatNumber = $this->getRequest()->getPost('vat_number');
        $vatCc = substr($vatNumber, 0, 2);
        $vatNumberWithoutCountry = str_replace($vatCc, '', $vatNumber);

        if ($service && $service->isOnline()) {

            try {
                $this->logger->debug('[Validation] Validating: '.$vatCc.' '.$vatNumberWithoutCountry);
                // Set service params
                $service->setParam('countryCode', $vatCc);
                $service->setParam('vatNumber', $vatNumberWithoutCountry);
                $service->connect();
                $service->validate();
                /** @var \Geissweb\Euvat\Api\Data\ValidationResultInterface $response */
                $response = $service->getResult();
            } catch (LocalizedException $e) {
                $this->logger->debug('[Validation] LocalizedException: '.$e->getMessage());
                $this->logger->critical($e);
            }

        }

        return $this->resultFactory->create(ResultFactory::TYPE_JSON)->setData($response);
    }
}
