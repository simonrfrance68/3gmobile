<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Helper;

use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Module\Manager;
use Magento\Store\Model\Information as StoreInformation;
use Magento\Store\Model\ScopeInterface;

/**
 * Class Configuration
 * @package Geissweb\Euvat\Helper
 */
class Configuration
{
    /**
     * @var \Magento\Framework\App\Config\ScopeConfigInterface
     */
    public $scopeConfig;

    /**
     * @var \Magento\Framework\App\ProductMetadataInterface
     */
    public $productMetaData;

    /**
     * @var \Magento\Store\Model\StoreManagerInterface
     */
    public $storeManager;

    /**
     * @var \Magento\Customer\Api\GroupManagementInterface
     */
    public $groupManagement;

    /**
     * @var \Magento\Directory\Model\ResourceModel\Country\CollectionFactory
     */
    public $countryCollectionFactory;

    /**
     * @var \Magento\Framework\App\Request\Http
     */
    public $request;

    /**
     * @var \Magento\Backend\Model\UrlInterface
     */
    public $backendUrlInterface;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * @var mixed
     */
    public $unserializer;

    /**
     * @var \Magento\Framework\Module\Dir
     */
    public $moduleDir;

    /**
     * @var \Magento\Framework\Filesystem\DriverInterface
     */
    public $filesystemDriver;

    /**
     * @var \Magento\Framework\Module\ResourceInterface
     */
    private $moduleResource;

    /**
     * @var \Magento\Config\Model\ResourceModel\Config
     */
    private $configResourceModel;

    /**
     * @var Manager
     */
    private $moduleManager;

    /**
     * Configuration constructor.
     *
     * @param \Magento\Framework\App\Request\Http                              $request
     * @param \Magento\Framework\App\Config\ScopeConfigInterface               $scopeConfig
     * @param \Magento\Framework\App\ProductMetadataInterface                  $productMetadata
     * @param Manager                                                          $moduleManager
     * @param \Magento\Framework\Module\ResourceInterface                      $moduleResource
     * @param \Magento\Store\Model\StoreManagerInterface                       $storeManager
     * @param \Magento\Config\Model\ResourceModel\Config                       $configResourceModel
     * @param \Magento\Directory\Model\ResourceModel\Country\CollectionFactory $countryCollectionFactory
     * @param \Magento\Customer\Api\GroupManagementInterface                   $groupManagement
     * @param \Magento\Backend\Model\UrlInterface                              $backendUrl
     * @param \Magento\Framework\Module\Dir                                    $moduleDir
     * @param \Magento\Framework\Filesystem\Driver\File                        $filesystemDriver
     * @param Compat\UnserializerFactory                                       $unserializerFactory
     */
    public function __construct(
        \Magento\Framework\App\Request\Http $request,
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
        \Magento\Framework\App\ProductMetadataInterface $productMetadata,
        \Magento\Framework\Module\Manager $moduleManager,
        \Magento\Framework\Module\ResourceInterface $moduleResource,
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Magento\Config\Model\ResourceModel\Config $configResourceModel,
        \Magento\Directory\Model\ResourceModel\Country\CollectionFactory $countryCollectionFactory,
        \Magento\Customer\Api\GroupManagementInterface $groupManagement,
        \Magento\Backend\Model\UrlInterface $backendUrl,
        \Magento\Framework\Module\Dir $moduleDir,
        \Magento\Framework\Filesystem\Driver\File $filesystemDriver,
        Compat\UnserializerFactory $unserializerFactory
    ) {
        $this->scopeConfig = $scopeConfig;
        $this->productMetaData = $productMetadata;
        $this->storeManager = $storeManager;
        $this->countryCollectionFactory = $countryCollectionFactory;
        $this->groupManagement = $groupManagement;
        $this->request = $request;
        $this->moduleManager = $moduleManager;
        $this->moduleResource = $moduleResource;
        $this->configResourceModel = $configResourceModel;
        $this->backendUrlInterface = $backendUrl;
        $this->moduleDir = $moduleDir;
        $this->filesystemDriver = $filesystemDriver;
        $this->unserializer = $unserializerFactory->create();
    }

    /**
     * Shorthand get config value by store
     * @param string $configPath
     *
     * @return mixed
     */
    public function getConfig($configPath)
    {
        try {
            $params = $this->request->getParams();
            if (isset($params['store_id'])) {
                $value = $this->scopeConfig->getValue($configPath, ScopeInterface::SCOPE_STORE, $params['store_id']);
            } else {
                $value = $this->scopeConfig->getValue($configPath, ScopeInterface::SCOPE_STORE);
            }

            /*
            //Enable only when needed, to log config values gotten
            if(!is_object($value)) {
                if(isset($params['store_id'])) {
                    $currentStore = $this->storeManager->getStore($params['store_id']);
                } else {
                    $currentStore = $this->storeManager->getStore();
                }

                $this->logger->debug('Getting '.$configPath.' value for store: '.$currentStore->getName()."
                (".$currentStore->getCode()." from website id ".$currentStore->getWebsiteId().")");
                $this->logger->debug('Value is: '.var_export($value,true));
            }
            */

            return $value;
        } catch (NoSuchEntityException $e) {
        }
    }

    /**
     * Is debug mode enabled?
     * @return bool
     */
    public function isDebugEnabled()
    {
        return (bool)$this->getConfig('euvat/mod_info/debug');
    }

    /* ----------- FRONTEND FIELD CONFIGS ------------- */

    /**
     * @return int
     */
    public function getFieldValidationDelay()
    {
        $delay = (int)$this->getConfig('euvat/integration/field_delay');
        if (empty($delay)) {
            $delay = 0;
        }
        return $delay;
    }

    /**
     * @return bool
     */
    public function getAskCustomerForCountryCorrection()
    {
        return (bool)$this->getConfig('euvat/integration/ask_customer_country_correction');
    }

    /**
     * Get VAT number input field JS component config
     * @param array $baseConfig
     * @param null  $customScope
     *
     * @return array
     * @throws NoSuchEntityException
     */
    public function getVatFieldConfig($baseConfig = [], $customScope = null)
    {
        $fieldVisible = (bool)$this->getConfig('customer/create_account/vat_frontend_visibility');

        $config = [
            'allowedCountries' => $this->getAllowedCountries(),
            'taxCalcMethod' => $this->getVatBasedOn(),
            'enableAjaxValidation' => $this->isValidationEnabled(),
            'handle' => $this->request->getFullActionName(),
            'debug' => $this->isDebugEnabled(),
            'template'=> 'Geissweb_Euvat/vatfield',
            'elementTmpl' => 'Geissweb_Euvat/vat-input',
            'vatFrontendVisibility' => $fieldVisible,
            'delay' => $this->getFieldValidationDelay(),
            'baseURL' => $this->storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::DEFAULT_URL_TYPE),
            'askCustomerCountryCorrection' => $this->getAskCustomerForCountryCorrection(),
            'optionalRegions' => []
        ];

        if ($customScope !== null) {
            $config['customScope'] = $customScope;
        }

        if ($this->getVatFieldTooltipText() != false) {
            $config['tooltip'] = ['description' => $this->getVatFieldTooltipText()];
        }

        return array_merge($baseConfig, $config);
    }

    /**
     * @return array
     * @throws NoSuchEntityException
     */
    public function getAdminVatFieldConfig()
    {
        $config = $this->getVatFieldConfig();
        $config['vatFrontendVisibility'] = true;
        $config['component'] = 'Geissweb_Euvat/js/form/element/vat-number-admin';
        $config['template'] = 'Geissweb_Euvat/form/vat-field';
        $config['elementTmpl'] = 'Geissweb_Euvat/form/element/vat-input';
        $config['validationUrl'] = $this->backendUrlInterface->getUrl('euvat/vatnumber/validation', []);
        $config['tooltip'] = [
            'description' => __('VAT number validation details will be set automatically after you save the customer.')
        ];
        return $config;
    }

    /**
     * @param array $baseConfig
     * @param null  $customScope
     *
     * @return array
     * @throws NoSuchEntityException
     */
    public function getVatFieldConfigMageplaza($baseConfig = [], $customScope = null)
    {
        $config = $this->getVatFieldConfig($baseConfig, $customScope);
        $config['template'] = 'Geissweb_Euvat/vatfield-mageplaza';
        if ($customScope !== null) {
            $config['customScope'] = $customScope;
        }
        return $config;
    }

    /**
     * @param array $baseConfig
     * @param null  $customScope
     *
     * @return array
     * @throws NoSuchEntityException
     */
    public function getVatFieldConfigAheadworks($baseConfig = [], $customScope = null)
    {
        $config = $this->getVatFieldConfig($baseConfig, $customScope);
        $config['template'] = 'Geissweb_Euvat/vatfield-aheadworks';
        if ($customScope !== null) {
            $config['customScope'] = $customScope;
        }
        return $config;
    }

    /**
     * Tooltip text
     * @return bool|string
     */
    public function getVatFieldTooltipText()
    {
        $tooltip = $this->getConfig('euvat/integration/field_tooltip');
        if ($tooltip != '') {
            return $tooltip;
        }
        return false;
    }

    /**
     * Get VAT number input field JS component config
     * @return array
     */
    public function getFieldValidationAtRegistration()
    {
        return [
            $this->getConfig('euvat/integration/field_validation_registration') => true
        ];
    }

    /**
     * Get VAT number input field JS component config
     * @return array
     */
    public function getFieldValidationAtAddressEdit()
    {
        return [
            $this->getConfig('euvat/integration/field_validation_addressedit') => true
        ];
    }

    /**
     * Get VAT number input field JS component config
     * @return array
     */
    public function getFieldValidationAtCheckout()
    {
        return [
            $this->getConfig('euvat/integration/field_validation_checkout') => true
        ];
    }

    /* ----------- COUNTRIES ------------- */

    /**
     * Gets a list of all current EU member states
     * @return array
     */
    public function getEuCountries()
    {
        return explode(",", $this->getConfig('general/country/eu_countries'));
    }

    /**
     * @return array
     */
    public function getGeneralAllowedCountries()
    {
        return explode(",", $this->getConfig('general/country/allow'));
    }

    /**
     * Get for which countries the field should be visible
     * @return array
     */
    public function getAllowedCountries()
    {
        return explode(",", $this->getConfig('euvat/integration/visible_countries'));
    }

    /**
     * Gets a list of all current EU member states as option array
     *
     * @param bool $allowNone
     *
     * @return array
     */
    public function getEuCountriesOptionArray($allowNone = false)
    {
        return $this->countryCollectionFactory->create()
                                              ->addCountryCodeFilter($this->getEuCountries(), 'iso2')
                                              ->loadData()
                                              ->toOptionArray($allowNone);
    }

    /**
     * Checks if country is within EU
     * @param string $countryCode
     *
     * @return bool
     */
    public function isEuCountry($countryCode)
    {
        if (in_array($countryCode, $this->getEuCountries())) {
            return true;
        }
        return false;
    }

    /* ----------- GROUPS ------------- */

    /**
     * Get cart product price display types per customer group
     * @return array
     */
    public function getCartProductPriceDisplayTypeRules()
    {
        $return = [];
        $config = $this->getConfig('euvat/group_price_display/cart_product_price_display');
        if (is_string($config) && $config !== null) {
            $rules = $this->unserializer->unserialize(
                $this->getConfig('euvat/group_price_display/cart_product_price_display')
            );
            foreach ($rules as $ruleId => $rule) {
                $return[(int)$rule['customer_group_id']] = (int)$rule['display_type'];
            }
        }
        return $return;
    }

    /**
     * Get catalog price display types per customer group
     * @return array
     */
    public function getCatalogPriceDisplayTypeRules()
    {
        $return = [];
        $config = $this->getConfig('euvat/group_price_display/catalog_price_display');
        if (is_string($config) && $config !== null) {
            $rules = $this->unserializer->unserialize(
                $this->getConfig('euvat/group_price_display/catalog_price_display')
            );
            foreach ($rules as $ruleId => $rule) {
                $return[(int)$rule['customer_group_id']] = (int)$rule['display_type'];
            }
        }
        return $return;
    }

    /**
     * Get catalog price display types per customer group
     * @return array
     */
    public function getCartSubtotalPriceDisplayTypeRules()
    {
        $return = [];
        $config = $this->getConfig('euvat/group_price_display/cart_subtotal_price_display');
        if (is_string($config) && $config !== null) {
            $rules = $this->unserializer->unserialize(
                $this->getConfig('euvat/group_price_display/cart_subtotal_price_display')
            );
            foreach ($rules as $ruleId => $rule) {
                $return[(int)$rule['customer_group_id']] = (int)$rule['display_type'];
            }
        }
        return $return;
    }

    /**
     * @return bool
     */
    public function isAssignCustomerGroupToGuestOrder()
    {
        return (bool)$this->getConfig('euvat/group_assignment/assign_customergroup_on_guest_order');
    }

    /**
     * Use group assignment?
     * @return bool
     */
    public function getUseGroupAssignment()
    {
        return (bool)$this->getConfig('euvat/group_assignment/use_group_assignment');
    }

    /**
     * Get the customer group for customers with valid VAT ID within EU
     * @return int
     */
    public function getTargetGroupEu()
    {
        return (int)$this->getConfig('euvat/group_assignment/target_group_eu');
    }

    /**
     * Get the customer group for customers with valid VAT ID within domestic country
     * @return int
     */
    public function getTargetGroupDomestic()
    {
        return (int)$this->getConfig('euvat/group_assignment/target_group_domestic');
    }

    /**
     * Get the customer group for customers outside EU
     * @return int
     */
    public function getTargetGroupOutsideEu()
    {
        return (int)$this->getConfig('euvat/group_assignment/target_group_outside');
    }

    /**
     * Get the customer group for customers with invalid VAT number
     * @return int
     */
    public function getTargetGroupInvalid()
    {
        return (int)$this->getConfig('euvat/group_assignment/target_group_invalid');
    }

    /**
     * Get the customer group for customers with technical error during VAT number validation
     * @return int
     */
    public function getTargetGroupErrors()
    {
        return (int)$this->getConfig('euvat/group_assignment/target_group_errors');
    }

    /**
     * Get excluded (for group assignment) customer groups
     * @return array
     */
    public function getExcludedGroups()
    {
        $excluded = $this->getConfig('euvat/group_assignment/excluded_groups');
        if (!is_array($excluded)) {
            return [$excluded];
        }
        return $excluded;
    }

    /**
     * Checks if a group is excluded from group assignment
     * @param $groupId
     *
     * @return bool
     */
    public function isExcludedGroup($groupId)
    {
        if (in_array($groupId, $this->getExcludedGroups())) {
            return true;
        }
        return false;
    }

    /**
     * Get excluded (for group assignment) customer groups
     * @return array
     */
    public function getNoDynamicGroups()
    {
        $noDynamic = explode(",", $this->getConfig('euvat/vat_settings/fixed_taxcalc_groups'));
        if (!is_array($noDynamic)) {
            return [$noDynamic];
        }
        return $noDynamic;
    }

    /**
     * Checks if a group is excluded from group assignment
     * @param $groupId
     *
     * @return bool
     */
    public function isNoDynamicGroup($groupId)
    {
        if (in_array($groupId, $this->getNoDynamicGroups())) {
            return true;
        }
        return false;
    }

    /**
     * Get excluded (for tax calculation) customer groups
     * @return array
     */
    public function getExcludedTaxGroups()
    {
        return [];
    }

    /**
     * @return int
     */
    public function getTargetGroupDefault()
    {
        try {
            return (int) $this->groupManagement->getDefaultGroup($this->storeManager->getStore()->getId())->getId();
        } catch (NoSuchEntityException $e) {
            return 1;
        } catch (LocalizedException $e) {
            return 1;
        }
    }

    /**
     * @return bool
     */
    public function getEnableTresholdCountries()
    {
        return (bool)$this->getConfig('euvat/vat_settings/threshold_enabled');
    }
    /**
     * @return mixed
     */
    public function getThresholdCountries()
    {
        return explode(",", $this->getConfig('euvat/vat_settings/threshold_countries'));
    }

    /**
     * @param $countryCode
     *
     * @return bool
     */
    public function isThresholdCountry($countryCode)
    {
        if (in_array($countryCode, $this->getThresholdCountries())) {
            return true;
        }
        return false;
    }

    /**
     * @param $customerCountryCode
     *
     * @return bool
     */
    public function isAlwaysVatCountry($customerCountryCode)
    {
        $alwaysVatCountries = explode(",", $this->getConfig('euvat/vat_settings/always_vat_countries'));
        if (in_array($customerCountryCode, $alwaysVatCountries)) {
            return true;
        }
        return false;
    }

    /* ----------- TAX CLASSES ------------- */

    /**
     * Gets the tax class for consumers
     * @return int
     */
    public function getConsumerTaxClass()
    {
        return (int)$this->getConfig('euvat/vat_settings/tax_class_including_consumer');
    }

    /**
     * Gets the tax class for businesses including VAT
     * @return int
     */
    public function getBusinessIncludingTaxClass()
    {
        return (int)$this->getConfig('euvat/vat_settings/tax_class_including_business');
    }

    /**
     * Gets the tax class for businesses excluding VAT
     * @return int
     */
    public function getBusinessExcludingTaxClass()
    {
        return (int)$this->getConfig('euvat/vat_settings/tax_class_excluding_business');
    }

    /**
     * Reduced Product Tax Class
     * @return int
     */
    public function getReducedProductTaxClass()
    {
        return (int)$this->getConfig('euvat/shipping_vat_settings/reduced_product_class');
    }

    /**
     * Reduced Shipping Tax Class
     * @return int
     */
    public function getReducedShippingTaxClass()
    {
        return (int)$this->getConfig('euvat/shipping_vat_settings/reduced_shipping_class');
    }

    /* ----------- OTHER ------------- */

    /**
     * Is dynamic VAT calculation enabled?
     * @return bool
     */
    public function getUseVatCalculation()
    {
        return (bool)$this->getConfig('euvat/vat_settings/use_vat_calculation');
    }

    /**
     * Is dynamic shipping VAT calculation enabled?
     * @return int
     */
    public function getUseDynamicShippingTaxClass()
    {
        return (int)$this->getConfig('euvat/shipping_vat_settings/use_dynamic_shipping_calculation');
    }

    /**
     * @return bool
     */
    public function isPeriodicRevalidationEnabled()
    {
        return (bool)$this->getConfig('euvat/revalidation/periodic_check_enabled');
    }

    /**
     * @return int
     */
    public function getRevalidationPeriod()
    {
        return (int)$this->getConfig('euvat/revalidation/validation_period');
    }

    /**
     * If offline validation mode is enabled
     * @return string
     */
    public function isOfflineValidationEnabled()
    {
        return (bool)$this->getConfig('euvat/interface_settings/use_offline_validation');
    }

    /**
     * @param $customerCountryCode
     *
     * @return bool
     */
    public function isOfflineValidationCountry($customerCountryCode)
    {
        $offlineValidationCountries = explode(",", $this->getConfig('euvat/vat_settings/offline_validation_countries'));
        if (in_array($customerCountryCode, $offlineValidationCountries)) {
            return true;
        }
        return false;
    }

    /**
     * If the VAT number validation is enabled
     * @return string
     */
    public function isValidationEnabled()
    {
        return (bool)$this->getConfig('euvat/interface_settings/validate_vatid');
    }

    /**
     * Gets the selected validation service
     * @return string
     */
    public function getValidationService()
    {
        return (string)$this->getConfig('euvat/interface_settings/interface');
    }

    /**
     * Get VAT calculation based on
     * @return string
     */
    public function getVatBasedOn()
    {
        return $this->getConfig(\Magento\Tax\Model\Config::CONFIG_XML_PATH_BASED_ON);
    }

    /**
     * @return bool
     */
    public function isCbtEnabled()
    {
        return (bool)$this->getConfig('tax/calculation/cross_border_trade_enabled');
    }

    /**
     * @return bool
     */
    public function getDisableCbtForOutOfEurope()
    {
        return (bool)$this->getConfig('euvat/vat_settings/disable_cbt_noneu');
    }

    /**
     * @return bool
     */
    public function getDisableCbtForEuBusiness()
    {
        return (bool)$this->getConfig('euvat/vat_settings/disable_cbt_eub2b');
    }

    /**
     * Get merchant country code
     * Use country code from the VAT number
     * If VAT number does not contain the country prefix, return the country store setting
     *
     * @param bool $forValidation
     *
     * @return string
     */
    public function getMerchantCountryCode($forValidation = false)
    {
        $vatNumber = (string)$this->getConfig(StoreInformation::XML_PATH_STORE_INFO_VAT_NUMBER);
        if (preg_match('/^[A-Z][A-Z]/', $vatNumber) == 1) {
            $country = substr($vatNumber, 0, 2);
            if ($country == 'EL' && !$forValidation) {
                return 'GR';
            }
            return $country;
        } else {
            return (string)$this->getConfig(StoreInformation::XML_PATH_STORE_INFO_COUNTRY_CODE);
        }
    }

    /**
     * Get the VAT number of merchant
     * @return string
     */
    public function getMerchantVatNumber()
    {
        $vatNumber = (string)$this->getConfig(StoreInformation::XML_PATH_STORE_INFO_VAT_NUMBER);
        $vatNumber = str_replace(' ', '', $vatNumber);
        $vatNumber = strtoupper($vatNumber);
        if (preg_match('/^[A-Z][A-Z]/', $vatNumber) == 1) {
            $vatNumber = substr($vatNumber, 2, strlen($vatNumber));
        }
        return $vatNumber;
    }

    /**
     * Is IPv6 Workaround enabled?
     * @return bool
     */
    public function getIsIpv6Compat()
    {
        return (bool)$this->getConfig('euvat/interface_settings/ip_compat');
    }

    /**
     * IPv4 Address to bind soap requests on
     * @return string
     */
    public function getIPv4ToBindOn()
    {
        return $this->getConfig('euvat/interface_settings/ip_compat');
    }

    /* ----------- THIRD PARTY ------------- */

    public function getIsAmastyCheckoutEnabled()
    {
        return $this->moduleManager->isEnabled('Amasty_Checkout')
               && (bool)$this->getConfig('amasty_checkout/general/enabled');
    }

    /* ----------- SUPPORT ------------- */

    /**
     * Checks if setup was executed or skipped
     * @return bool
     */
    public function getIsInstalled()
    {
        return $this->getConfig('euvat/extension_info/is_installed');
    }

    /**
     * This information is only used for support and internal statistics.
     * Nothing is being sent to third parties and no personal data is collected.
     *
     * @return array
     * @throws \Magento\Framework\Exception\FileSystemException
     */
    public function getSystemInformation()
    {

        $composerJsonFile = $this->moduleDir->getDir('Geissweb_Euvat').DIRECTORY_SEPARATOR.'composer.json';
        if ($this->filesystemDriver->isExists($composerJsonFile)) {
            $jsonContent = $this->filesystemDriver->fileGetContents($composerJsonFile);
            if ($this->unserializer instanceof \Magento\Framework\Serialize\Serializer\Json) {
                $composerJson = $this->unserializer->unserialize($jsonContent);
            } else {
                $composerJson = (array)json_decode($jsonContent);
            }
            $version = $composerJson['version'];
        } else {
            $version = $this->moduleResource->getDbVersion('Geissweb_Euvat');
        }

        $data = [
            'magento_version' => $this->productMetaData->getVersion(),
            'version' => $version,
            'server_hostname' => $this->request->getServer('SERVER_NAME'),
            'license_key' => $this->getConfig('euvat/mod_info/license_key'),
            'installation_type' => $this->getConfig('euvat/mod_info/installation_type'),
            'edition' => $this->productMetaData->getEdition(),
        ];

        return $data;
    }

    /**
     * Register Installation
     * @return void
     * @throws \Magento\Framework\Exception\FileSystemException
     */
    public function registerInstallation()
    {
        $data = base64_encode(join(";", $this->getSystemInformation()));

        $cs = curl_init();
        curl_setopt($cs, CURLOPT_URL, 'https://www.geissweb.de/feeds/m2reg.php');
        curl_setopt($cs, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($cs, CURLOPT_POST, 1);
        curl_setopt($cs, CURLOPT_POSTFIELDS, "v=2&d=$data");
        curl_setopt($cs, CURLOPT_VERBOSE, false);
        curl_setopt($cs, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);
        curl_setopt($cs, CURLOPT_TIMEOUT, 10);
        $response = curl_exec($cs);
        curl_close($cs);

        if ($response !== false) {
            $this->configResourceModel->saveConfig('euvat/extension_info/is_registered', true, 'default', 0);
            $this->configResourceModel->saveConfig(
                'euvat/extension_info/last_contact',
                date("d.m.Y", time()),
                'default',
                0
            );
        }
    }
}
