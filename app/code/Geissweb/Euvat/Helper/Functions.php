<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Helper;

use Magento\Customer\Api\Data\AddressInterface;
use Geissweb\Euvat\Model\Validation;

/**
 * Class Functions
 * @package Geissweb\Euvat\Helper
 */
class Functions
{
    /**
     * @var Configuration
     */
    public $configHelper;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * Configuration constructor.
     *
     * @param Configuration            $configHelper
     * @param \Geissweb\Euvat\Logger\Logger $logger
     */
    public function __construct(
        Configuration $configHelper,
        \Geissweb\Euvat\Logger\Logger $logger
    ) {
        $this->configHelper = $configHelper;
        $this->logger = $logger;
    }

    /**
     * @param $order
     * @param $vatBasedOn
     *
     * @return bool
     */
    public function getBasedOnAddressFromOrder($order, $vatBasedOn)
    {
        foreach ($order->getAddresses() as $address) {
            if ($address->getAddressType() == $vatBasedOn) {
                return $address;
            }
        }

        foreach ($order->getAddresses() as $address) {
            if ($address->getAddressType() == 'billing') {
                return $address;
            }
        }

        return false;
    }

    /**
     * @param AddressInterface|\Magento\Customer\Model\Address $address
     * @param Validation|\Magento\Framework\Model\AbstractModel|
     *        \Geissweb\Euvat\Api\Data\ValidationInterface $vatValidation
     * @return int
     */
    public function getCustomerGroup($address, $vatValidation)
    {
        $this->logger->debug("[FunctionsHelper::Group Assignment]");
        try {

            if (!is_object($vatValidation)) {
                if (is_object($address) && !$this->configHelper->isEuCountry($address->getCountryId())) {
                    $this->logger->debug("NON-Europe Group.");
                    return (int)$this->configHelper->getTargetGroupOutsideEu();
                }
                return (int)$this->configHelper->getTargetGroupDefault();
            }

            $vatdata = [
                'address_country_id' => $address->getCountryId(),
                'vat_country_id' => $vatValidation->getVatRequestCountryCode(),
                'vat_id' => $vatValidation->getVatId(),
                'vat_is_valid' => $vatValidation->getVatIsValid(),
                'vat_request_success' => $vatValidation->getVatRequestSuccess()
            ];
            $shopCc = $this->configHelper->getMerchantCountryCode();

            if (isset($vatdata['address_country_id']) && !empty($vatdata['address_country_id'])) {
                $customerCc = $vatdata['address_country_id'];
            } elseif (isset($vatdata['vat_country_id']) && !empty($vatdata['vat_country_id'])) {
                $customerCc = $vatdata['vat_country_id'];
                // Fix Greece
                if ($customerCc == "EL") {
                    $customerCc = "GR";
                }
            } else {
                $this->logger->debug("Default Group.");
                return (int)$this->configHelper->getTargetGroupDefault();
            }

            // Check the validation data and return best fitting group
            if (isset($vatdata['vat_id']) && !empty($vatdata['vat_id'])) {

                $this->logger->debug("Customer CC: $customerCc");
                $this->logger->debug("VAT Number: ".$vatdata['vat_id']);

                // Valid EU
                if ($vatdata['vat_is_valid'] == true
                    && $vatdata['vat_request_success'] == true
                    && $shopCc != $customerCc
                    && $this->configHelper->isEuCountry($customerCc)
                ) {
                    $this->logger->debug("Valid EU Group.");
                    return (int)$this->configHelper->getTargetGroupEu();

                //Valid Domestic
                } elseif ($vatdata['vat_is_valid'] == true
                          && $vatdata['vat_request_success'] == true
                          && $shopCc == $customerCc
                          && $this->configHelper->isEuCountry($customerCc)
                ) {
                    $this->logger->debug("Valid Domestic Group.");
                    return (int)$this->configHelper->getTargetGroupDomestic();

                //Invalid Number
                } elseif ($vatdata['vat_is_valid'] == false
                          && $vatdata['vat_request_success'] == true
                ) {
                    $this->logger->debug("Invalid Number Group.");
                    return (int)$this->configHelper->getTargetGroupInvalid();

                //Request fail
                } elseif ($vatdata['vat_request_success'] == false) {
                    $this->logger->debug("Technical Error Group.");
                    return (int)$this->configHelper->getTargetGroupErrors();

                //non-EU
                } else {
                    if (!$this->configHelper->isEuCountry($customerCc)) {
                        $this->logger->debug("NON-Europe Group.");
                        return (int)$this->configHelper->getTargetGroupOutsideEu();
                    }
                }

            } else {// No validation data, try to identify country outside EU
                if (!$this->configHelper->isEuCountry($customerCc)) {
                    $this->logger->debug("NON-Europe Group");
                    return (int)$this->configHelper->getTargetGroupOutsideEu();
                }
            }
            $this->logger->debug("Default Group.");
            return (int)$this->configHelper->getTargetGroupDefault();

        } catch (\Exception $e) {
            $this->logger->critical($e);
            $this->logger->debug("Default Group :x");
            return (int)$this->configHelper->getTargetGroupDefault();
        }
    }

    /**
     * Format VAT Number
     * @param null $vatNumber
     * @param null $countryCode
     *
     * @return bool|string
     */
    public function formatVatNumber($vatNumber = null, $countryCode = null)
    {
        if ($vatNumber != null) {
            if ($countryCode != null && preg_match('/^[A-Z][A-Z]/', $vatNumber) === 0) {
                $vatId = $countryCode.$vatNumber;
            } else {
                $vatId = $vatNumber;
            }
            return strtoupper(preg_replace("/[^a-zA-Z0-9]+/", "", $vatId));
        }
        return false;
    }

    /**
     * Extracts Country from VAT-ID
     * Greece has different VAT number prefix
     * @param string $vatId
     *
     * @return string
     */
    public function extractCountryIdFromVatId($vatId)
    {
        if (preg_match('/^[A-Z][A-Z]/', $vatId) == 1) {
            $country = strtoupper(substr($vatId, 0, 2));
            if ($country === 'EL') {
                $country = 'GR';
            }
            return $country;
        }
        return '';
    }

    /**
     * @param $vatId
     *
     * @return array
     */
    public function splitVatNumber($vatId)
    {
        return [
            'cc' => $this->extractCountryIdFromVatId($vatId),
            'number' => substr($vatId, 2)
        ];
    }
}
