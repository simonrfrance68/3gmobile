<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Observer;

use Magento\Framework\Event\ObserverInterface;
use Magento\Customer\Model\Address;

/**
 * Customer Observer Model
 */
class QuoteAddressSaveBefore implements ObserverInterface
{
    /**
     * @var \Geissweb\Euvat\Model\ValidationRepository
     */
    public $validationRepository;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;
    /**
     * @var \Magento\Customer\Api\AddressRepositoryInterface
     */
    public $customerAddressRepository;

    /**
     * Constructor
     *
     * @param \Geissweb\Euvat\Model\ValidationRepository $validationRepository
     * @param \Geissweb\Euvat\Logger\Logger              $logger
     */
    public function __construct(
        \Geissweb\Euvat\Model\ValidationRepository $validationRepository,
        \Geissweb\Euvat\Logger\Logger $logger,
        \Magento\Customer\Api\AddressRepositoryInterface $addressRepository
    ) {
        $this->validationRepository = $validationRepository;
        $this->logger = $logger;
        $this->customerAddressRepository = $addressRepository;
    }

    /**
     * Address before save event handler
     * Adds VAT number validation data from table to address
     *
     * @param \Magento\Framework\Event\Observer $observer
     *
     * @return void
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function execute(\Magento\Framework\Event\Observer $observer)
    {
        $this->logger->debug("[QuoteAddressSaveBeforeObserver] START");

        /** @var $quoteAddress Address */
        $quoteAddress = $observer->getQuoteAddress();
        $this->logger->debug("[QuoteAddressSaveBeforeObserver] Address is:", [$quoteAddress->toArray()]);
        $vatId = $quoteAddress->getVatId();

        if (!empty($vatId)) {
            $this->logger->debug("Searching for validation: $vatId");
            /** @var \Geissweb\Euvat\Api\Data\ValidationInterface $validation */
            $validation = $this->validationRepository->getByVatId($vatId);
            if ($validation) {
                $this->logger->debug("Applying validation data to quote address id: ".$quoteAddress->getId());
                $quoteAddress->setVatIsValid($validation->getVatIsValid());
                $quoteAddress->setVatTraderName($validation->getVatTraderName());
                $quoteAddress->setVatTraderAddress($validation->getVatTraderAddress());
                $quoteAddress->setVatRequestSuccess($validation->getVatRequestSuccess());
                $quoteAddress->setVatRequestDate($validation->getVatRequestDate());
                $quoteAddress->setVatRequestId($validation->getVatRequestId());
            }

        } else {
            $this->logger->debug("No VAT number on quote address id: ".$quoteAddress->getId());
            $quoteAddress->setVatIsValid();
            $quoteAddress->setVatTraderName();
            $quoteAddress->setVatTraderAddress();
            $quoteAddress->setVatRequestSuccess();
            $quoteAddress->setVatRequestDate();
            $quoteAddress->setVatRequestId();
        }

        $this->logger->debug("[QuoteAddressSaveBeforeObserver] END");
    }
}
