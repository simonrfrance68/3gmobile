<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Observer;

use Geissweb\Euvat\Logger\Logger;
use Magento\Framework\Exception\LocalizedException;

/**
 * Class VatValidationAfter
 * @package Geissweb\Euvat\Observer
 */
class VatValidationAfter implements \Magento\Framework\Event\ObserverInterface
{
    /**
     * @var \Geissweb\Euvat\Model\Validation
     */
    public $validationModel;

    /**
     * @var \Geissweb\Euvat\Model\ValidationRepository
     */
    public $validationRepository;

    /**
     * @var \Magento\Framework\Api\SearchCriteriaBuilder
     */
    public $search;
    /**
     * @var Logger
     */
    private $logger;

    /**
     * Constructor
     *
     * @param \Geissweb\Euvat\Model\Validation             $validationModel
     * @param \Geissweb\Euvat\Model\ValidationRepository   $validationRepository
     * @param Logger                                       $logger
     * @param \Magento\Framework\Api\SearchCriteriaBuilder $searchCriteriaBuilder
     */
    public function __construct(
        \Geissweb\Euvat\Model\Validation $validationModel,
        \Geissweb\Euvat\Model\ValidationRepository $validationRepository,
        \Geissweb\Euvat\Logger\Logger $logger,
        \Magento\Framework\Api\SearchCriteriaBuilder $searchCriteriaBuilder
    ) {
        $this->validationModel = $validationModel;
        $this->validationRepository = $validationRepository;
        $this->search = $searchCriteriaBuilder;
        $this->logger = $logger;
    }

    /**
     * Save validation on customer address
     *
     * @param \Magento\Framework\Event\Observer $observer
     *
     * @return void
     * @throws LocalizedException
     */
    public function execute(\Magento\Framework\Event\Observer $observer)
    {
        $this->logger->debug("VatValidationAfter Start");

        /** @var \Geissweb\Euvat\Model\Validation\Result $result */
        $result = $observer->getEvent()->getValidationResult();

        $searchCriteria = $this->search->addFilter(
            'vat_id',
            $result->getVatRequestCountryCode().$result->getVatId(),
            'eq'
        )->create();
        $validationList = $this->validationRepository->getList($searchCriteria);
        $items = $validationList->getItems();

        $this->logger->debug("VatValidationAfter checking VAT number: ".$result->getVatRequestCountryCode().$result->getVatId());

        if ($validationList->getTotalCount() > 0) {
            $this->logger->debug("VatValidationAfter updating validation information.");
            foreach ($items as $item) {
                $item->setHandle($result->getHandle());
                $item->setVatId($result->getVatRequestCountryCode().$result->getVatId());
                $item->setVatIsValid($result->getVatIsValid());
                $item->setVatRequestDate($result->getVatRequestDate());
                $item->setVatRequestId($result->getVatRequestId());
                $item->setVatRequestSuccess($result->getVatRequestSuccess());
                $item->setVatTraderName($result->getVatTraderName());
                $item->setVatTraderAddress($result->getVatTraderAddress());
                try {
                    $this->validationRepository->save($item);
                } catch (LocalizedException $e) {
                }
            }

        } else {
            $this->logger->debug("VatValidationAfter creating validation information.");
            $this->validationModel->clearInstance();
            $this->validationModel->setHandle($result->getHandle());
            $this->validationModel->setVatId($result->getVatRequestCountryCode().$result->getVatId());
            $this->validationModel->setVatIsValid($result->getVatIsValid());
            $this->validationModel->setVatRequestDate($result->getVatRequestDate());
            $this->validationModel->setVatRequestId($result->getVatRequestId());
            $this->validationModel->setVatRequestSuccess($result->getVatRequestSuccess());
            $this->validationModel->setVatTraderName($result->getVatTraderName());
            $this->validationModel->setVatTraderAddress($result->getVatTraderAddress());
            try {
                $savedValidation = $this->validationRepository->save($this->validationModel);
            } catch (LocalizedException $e) {
            }
        }

        $this->logger->debug("VatValidationAfter End");
    }
}
