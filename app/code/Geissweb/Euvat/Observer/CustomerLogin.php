<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Observer;

use Magento\Framework\Event\ObserverInterface;
use Magento\Framework\Exception\LocalizedException;

/**
 * Class CustomerLogin
 * @package Geissweb\Euvat\Observer
 */
class CustomerLogin implements ObserverInterface
{
    /**
     * @var \Geissweb\Euvat\Model\ValidationRepository
     */
    public $validationRepository;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * @var \Magento\Checkout\Model\Session
     */
    public $checkoutSession;

    /**
     * @var \Magento\Quote\Api\CartRepositoryInterface
     */
    public $quoteRepository;

    /**
     * @var \Magento\Quote\Api\CartManagementInterface
     */
    public $quoteManagement;

    /**
     * @var \Geissweb\Euvat\Helper\Functions
     */
    private $functionsHelper;

    /**
     * @var \Geissweb\Euvat\Model\Validation\Vies
     */
    private $viesService;

    /**
     * @var \Magento\Customer\Model\ResourceModel\AddressRepository
     */
    private $addressRepository;

    /**
     * Constructor
     *
     * @param \Geissweb\Euvat\Model\ValidationRepository              $validationRepository
     * @param \Geissweb\Euvat\Model\Validation\ViesFactory            $viesService
     * @param \Geissweb\Euvat\Helper\Functions                        $functionsHelper
     * @param \Geissweb\Euvat\Logger\Logger                           $logger
     * @param \Magento\Customer\Model\ResourceModel\AddressRepository $addressRepository
     * @param \Magento\Checkout\Model\Session                         $checkoutSession
     * @param \Magento\Quote\Api\CartRepositoryInterface              $quoteRepository
     * @param \Magento\Quote\Api\CartManagementInterface              $quoteManagement
     */
    public function __construct(
        \Geissweb\Euvat\Model\ValidationRepository $validationRepository,
        \Geissweb\Euvat\Model\Validation\ViesFactory $viesService,
        \Geissweb\Euvat\Helper\Functions $functionsHelper,
        \Geissweb\Euvat\Logger\Logger $logger,
        \Magento\Customer\Model\ResourceModel\AddressRepository $addressRepository,
        \Magento\Checkout\Model\Session $checkoutSession,
        \Magento\Quote\Api\CartRepositoryInterface $quoteRepository,
        \Magento\Quote\Api\CartManagementInterface $quoteManagement
    ) {
        $this->validationRepository = $validationRepository;
        $this->logger               = $logger;
        $this->functionsHelper      = $functionsHelper;
        $this->viesService          = $viesService;
        $this->addressRepository = $addressRepository;
        $this->checkoutSession = $checkoutSession;
        $this->quoteRepository = $quoteRepository;
        $this->quoteManagement = $quoteManagement;
    }

    /**
     * @param \Magento\Framework\Event\Observer $observer
     */
    public function execute(\Magento\Framework\Event\Observer $observer)
    {
        try {
            /** @var \Magento\Customer\Model\Customer $customer */
            $customer = $observer->getEvent()->getCustomer();

            if ($this->functionsHelper->configHelper->isPeriodicRevalidationEnabled()
            ) {
                $period = $this->functionsHelper->configHelper->getRevalidationPeriod();
                $addressCount = $customer->getAddressesCollection()->getSize();
                $i=0;

                /** @var \Magento\Customer\Model\Address $address */
                foreach ($customer->getAddressesCollection() as $address) {
                    $i++;
                    $needValidate = false;
                    $vatId = $this->functionsHelper->formatVatNumber($address->getVatId());
                    $this->logger->debug("[CustomerLoginObserver] address $i (".get_class($address).") of $addressCount with vatid: ".$vatId);
                    if (empty($vatId)) {
                        continue;
                    }

                    /** @var \Geissweb\Euvat\Api\Data\ValidationInterface $validation */
                    $validation = $this->validationRepository->getByVatId($vatId);
                    if ($validation) {
                        $diff = $this->diffInMonths(new \DateTime($validation->getVatRequestDate()), new \DateTime());
                        $this->logger->debug("[CustomerLoginObserver] lastValidation for $vatId: ".$validation->getVatRequestDate()." ($diff months old)");
                        if ($diff >= $period) {
                            $needValidate = true;
                        }
                    } else {
                        $needValidate = true;
                    }

                    if ($needValidate) {
                        /** @var \Geissweb\Euvat\Model\Validation\Vies $service */
                        $service = $this->viesService->create();
                        $this->logger->debug("[CustomerLoginObserver] Now revalidating: $vatId");
                        $vatNumber = $this->functionsHelper->splitVatNumber($vatId);
                        $service->setParam('countryCode', $vatNumber['cc']);
                        $service->setParam('vatNumber', $vatNumber['number']);

                        if ($service->isOnline()) {
                            $service->connect();
                            $service->validate();
                            /** @var \Geissweb\Euvat\Api\Data\ValidationResultInterface $response */
                            $response = $service->getResult();
                            $addressUpdateData = [
                                'vat_id' => $vatId,
                                'vat_is_valid' => $response->getVatIsValid(),
                                'vat_request_date' => $response->getVatRequestDate(),
                                'vat_request_id' => $response->getVatRequestId(),
                                'vat_request_success' => $response->getVatRequestSuccess(),
                                'vat_trader_name' => $response->getVatTraderName(),
                                'vat_trader_address' => $response->getVatTraderAddress()
                            ];
                            $repoAddress = $this->addressRepository->getById($address->getId());
                            foreach ($addressUpdateData as $key => $data) {
                                $repoAddress->setData($key, $data);
                            }
                            $this->addressRepository->save($repoAddress);
                            $this->logger->debug("[CustomerLoginObserver] revalidated data for $vatId: ".var_export($addressUpdateData, true));
                        }
                    }
                }
            }

        } catch (LocalizedException $e) {
            $this->logger->addError($e->getMessage());
        } catch (\Exception $e) {
            $this->logger->addError($e->getMessage());
        }
    }


    /**
     * Calculate the difference in months between two dates (v1 / 18.11.2013)
     *
     * @param \DateTime $date1
     * @param \DateTime $date2
     * @return int
     *
     * @thanks https://stackoverflow.com/users/766177/valentin-despa
     */
    public function diffInMonths(\DateTime $date1, \DateTime $date2)
    {
        $diff =  $date1->diff($date2);
        $months = $diff->y * 12 + $diff->m + $diff->d / 30;
        return (int) round($months);
    }
}
