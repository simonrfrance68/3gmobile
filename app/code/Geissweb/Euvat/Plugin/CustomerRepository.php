<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin;

use Magento\Customer\Api\Data\CustomerInterface;
use Magento\Framework\Exception\LocalizedException;

/**
 * Class CustomerRepository
 * @package Geissweb\Euvat\Plugin
 */
class CustomerRepository
{
    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    public $configHelper;

    /**
     * @var \Geissweb\Euvat\Helper\Functions
     */
    public $functionsHelper;

    /**
     * @var \Geissweb\Euvat\Model\ValidationRepository
     */
    public $validationRepository;

    /**
     * @var \Magento\Customer\Api\AddressRepositoryInterface
     */
    public $addressRepository;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * @var \Geissweb\Euvat\Model\ValidationFactory
     */
    public $validationFactory;

    /**
     * @var \Magento\Framework\Registry
     */
    private $registry;
    /**
     * @var \Magento\Customer\Model\Session
     */
    private $customerSession;

    /**
     * Constructor
     *
     * @param \Geissweb\Euvat\Helper\Configuration             $configHelper
     * @param \Geissweb\Euvat\Helper\Functions                 $functionsHelper
     * @param \Geissweb\Euvat\Model\ValidationRepository       $validationRepository
     * @param \Geissweb\Euvat\Model\ValidationFactory          $validationFactory
     * @param \Magento\Customer\Api\AddressRepositoryInterface $addressRepository
     * @param \Magento\Framework\Registry                      $registry
     * @param \Geissweb\Euvat\Logger\Logger                    $logger
     */
    public function __construct(
        \Geissweb\Euvat\Helper\Configuration $configHelper,
        \Geissweb\Euvat\Helper\Functions $functionsHelper,
        \Geissweb\Euvat\Model\ValidationRepository $validationRepository,
        \Geissweb\Euvat\Model\ValidationFactory $validationFactory,
        \Magento\Customer\Api\AddressRepositoryInterface $addressRepository,
        \Magento\Framework\Registry $registry,
        \Magento\Customer\Model\Session $customerSession,
        \Geissweb\Euvat\Logger\Logger $logger
    ) {
        $this->configHelper = $configHelper;
        $this->functionsHelper = $functionsHelper;
        $this->validationRepository = $validationRepository;
        $this->validationFactory = $validationFactory;
        $this->addressRepository = $addressRepository;
        $this->logger = $logger;
        $this->registry = $registry;
        $this->customerSession = $customerSession;
    }

    /**
     * @param                   $subject
     * @param CustomerInterface $customer
     * @param null              $passwordHash
     *
     * @return array
     */
    public function beforeSave($subject, CustomerInterface $customer, $passwordHash = null)
    {
        $this->logger->debug("[CustomerRepository::beforeSave] START");

        if ($customer->getDefaultBilling() > 0
           && $this->configHelper->getUseGroupAssignment()
            && !$this->registry->registry('euvat_groupassign_customersave')
        ) {

            $this->logger->debug("Customer has default billing address");
            try {
                $billingAddress = $this->addressRepository->getById($customer->getDefaultBilling());
                $vatValidation = $this->validationRepository->getByVatId($billingAddress->getVatId());
                if (!$vatValidation) {
                    $vatValidation = $this->validationFactory->create();
                }

                $isDisableAutoGroupChange = $customer->getDisableAutoGroupChange();
                $isExcludedGroup = in_array($customer->getGroupId(), $this->configHelper->getExcludedGroups());
                if (!$isDisableAutoGroupChange && !$isExcludedGroup) {
                    $groupId = $this->functionsHelper->getCustomerGroup($billingAddress, $vatValidation);
                    $this->logger->debug("Assigning group $groupId");
                    $this->registry->register('euvat_groupassign_customersave', true);
                    $customer->setGroupId($groupId);
                    $this->customerSession->setCustomerGroupId($groupId);
                } else {
                    $this->logger->debug("No assignment.");
                    $this->logger->debug("auto group change is disabled: ".$isDisableAutoGroupChange);
                    $this->logger->debug("group is excluded: ".$isExcludedGroup);
                }

            } catch (LocalizedException $e) {
                $this->logger->debug($e);
            }

        }

        $this->logger->debug("[CustomerRepository::beforeSave] END");
        return [$customer, $passwordHash];
    }
}
