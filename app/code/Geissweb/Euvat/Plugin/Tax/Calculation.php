<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin\Tax;

use Magento\Framework\Event\ManagerInterface;

/**
 * Class Calculation
 * @package Geissweb\Euvat\Plugin\Tax
 */
class Calculation
{

    /**
     * @var \Geissweb\Euvat\Model\Validation
     */
    public $validationModel;

    /**
     * @var \Geissweb\Euvat\Model\ValidationRepository
     */
    public $validationRepository;

    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    public $configHelper;

    /**
     * @var \Geissweb\Euvat\Helper\Functions
     */
    public $functionsHelper;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * @var \Magento\Framework\Api\ExtensibleDataObjectConverter
     */
    public $converter;

    /**
     * @var \Magento\Customer\Model\Session
     */
    public $customerSession;
    /**
     * @var ManagerInterface
     */
    public $eventManager;

    /**
     * TaxCalculation constructor.
     *
     * @param \Geissweb\Euvat\Model\Validation                     $validationModel
     * @param \Geissweb\Euvat\Model\ValidationRepository           $validationRepository
     * @param \Geissweb\Euvat\Helper\Configuration                 $configHelper
     * @param \Geissweb\Euvat\Helper\Functions                     $functionsHelper
     * @param \Geissweb\Euvat\Logger\Logger                        $logger
     * @param ManagerInterface                                     $eventManager
     * @param \Magento\Framework\Api\ExtensibleDataObjectConverter $converter
     * @param \Magento\Customer\Model\Session                      $customerSession
     */
    public function __construct(
        \Geissweb\Euvat\Model\Validation $validationModel,
        \Geissweb\Euvat\Model\ValidationRepository $validationRepository,
        \Geissweb\Euvat\Helper\Configuration $configHelper,
        \Geissweb\Euvat\Helper\Functions $functionsHelper,
        \Geissweb\Euvat\Logger\Logger $logger,
        \Magento\Framework\Event\ManagerInterface $eventManager,
        \Magento\Framework\Api\ExtensibleDataObjectConverter $converter,
        \Magento\Customer\Model\Session $customerSession
    ) {
        $this->validationModel = $validationModel;
        $this->validationRepository = $validationRepository;
        $this->configHelper = $configHelper;
        $this->functionsHelper = $functionsHelper;
        $this->logger = $logger;
        $this->eventManager = $eventManager;
        $this->converter = $converter;
        $this->customerSession = $customerSession;
    }

    /**
     * @param \Magento\Tax\Model\Calculation $subject
     * @param callable                       $proceed
     * @param null                           $shippingAddress
     * @param null                           $billingAddress
     * @param null                           $customerTaxClass
     * @param null                           $store
     * @param null                           $customerId
     *
     * @return mixed
     */
    public function aroundGetRateRequest(
        \Magento\Tax\Model\Calculation $subject,
        callable $proceed,
        $shippingAddress = null,
        $billingAddress = null,
        $customerTaxClass = null,
        $store = null,
        $customerId = null
    ) {

        if ($customerId !== null) {
            $this->logger->debug("aroundGetRateRequest calculating for customer id: $customerId");
        }

        if (!$this->configHelper->getUseVatCalculation()) {
            $this->logger->debug("aroundGetRateRequest dynamic tax class application is disabled.");
            return $proceed($shippingAddress, $billingAddress, $customerTaxClass, $store, $customerId);
        }

        // Allow fixed tax class for specified groups
        if ($this->customerSession->isLoggedIn()) {
            $groupId = $this->customerSession->getCustomer()->getGroupId();
            if ($this->configHelper->isNoDynamicGroup($groupId)) {
                $this->logger->debug("aroundGetRateRequest return proceed because of no dynamic tax group");
                return $proceed($shippingAddress, $billingAddress, $customerTaxClass, $store, $customerId);
            }
        }

        /**@var $billingAddress \Magento\Customer\Model\Data\Address */
        /**@var $shippingAddress \Magento\Customer\Model\Data\Address */
        $basedOn = $this->configHelper->getVatBasedOn();
        if ($basedOn == 'shipping') {

            if (($shippingAddress === false || $shippingAddress === null)
                || (is_object($shippingAddress) && $shippingAddress->getCountryId() === null)
            ) {
                //Need to use the default address in this case
                if (!is_null($customerId)) {
                    $this->logger->debug("aroundGetRateRequest using default $basedOn address");
                    $shippingAddress = $this->customerSession->getCustomer()->getDefaultShippingAddress();
                } else {
                    $this->logger->debug("aroundGetRateRequest return $basedOn proceed");
                    return $proceed($shippingAddress, $billingAddress, $customerTaxClass, $store, $customerId);
                }
            }
            $basedOnAddress = $shippingAddress;

        } elseif ($basedOn == 'billing') {

            if (($billingAddress === false || $billingAddress === null)
                || (is_object($billingAddress) && $billingAddress->getCountryId() === null)
            ) {
                //Need to use the default address in this case
                if (!is_null($customerId)) {
                    $this->logger->debug("aroundGetRateRequest using default $basedOn address");
                    $billingAddress = $this->customerSession->getCustomer()->getDefaultBillingAddress();
                } else {
                    $this->logger->debug("aroundGetRateRequest return $basedOn proceed");
                    return $proceed($shippingAddress, $billingAddress, $customerTaxClass, $store, $customerId);
                }
            }
            $basedOnAddress = $billingAddress;

        } else {
            $this->logger->debug("aroundGetRateRequest return $basedOn proceed");
            return $proceed($shippingAddress, $billingAddress, $customerTaxClass, $store, $customerId);
        }

        if (!$basedOnAddress) {
            return $proceed($shippingAddress, $billingAddress, $customerTaxClass, $store, $customerId);
        }

        $this->logger->debugAddress($basedOnAddress);
        $vatId = $basedOnAddress->getVatId();
        $shopCc = $this->configHelper->getMerchantCountryCode();
        $customerCountryCode = $basedOnAddress->getCountryId();
        $this->logger->debug("aroundGetRateRequest vatId: $vatId");
        $this->logger->debug("aroundGetRateRequest shopCc $shopCc");
        $this->logger->debug("aroundGetRateRequest customerCountryCode $customerCountryCode");

        $this->eventManager->dispatch(
            'estimate_tax_based_on_country',
            ['country_code' => $customerCountryCode]
        );

        if (!empty($vatId)) {

            $customerVatNumberCc = $this->functionsHelper->extractCountryIdFromVatId($vatId);

            /** @var \Geissweb\Euvat\Model\Validation $validation */
            $validation = $this->validationRepository->getByVatId($vatId);

            if ($validation && $validation->getVatRequestSuccess() == true) {
                $this->logger->debug("aroundGetRateRequest Validation successful.");
                if ($validation->getVatIsValid() == true
                     && ($shopCc != $customerCountryCode)
                     && $this->configHelper->isEuCountry($customerCountryCode)
                ) {
                    $isAlwaysVatCountry = $this->configHelper->isAlwaysVatCountry($customerCountryCode);
                    //Customer has valid VAT-ID and is not domestic
                    $this->logger->debug("aroundGetRateRequest Customer has valid VAT-ID and is not domestic.");
                    if ($customerVatNumberCc == $customerCountryCode && !$isAlwaysVatCountry
                    ) {
                        $taxClassToSet = $this->configHelper->getBusinessExcludingTaxClass();
                    } else {
                        $this->logger->debug("aroundGetRateRequest VAT-ID not matching address country 
                                            / always calculate VAT country (".(int)$isAlwaysVatCountry.")");
                        $taxClassToSet = $this->configHelper->getConsumerTaxClass();
                    }

                } elseif ($validation->getVatIsValid() == true && $shopCc == $customerCountryCode) {
                    //Customer has valid VAT-ID and is domestic
                    $this->logger->debug("aroundGetRateRequest Customer has valid VAT-ID and is domestic.");
                    $taxClassToSet = $this->configHelper->getBusinessIncludingTaxClass();

                } elseif ($validation->getVatIsValid() == false) {
                    $this->logger->debug("aroundGetRateRequest Invalid VAT-ID.");
                    $taxClassToSet = $this->configHelper->getConsumerTaxClass();
                }

            } elseif ($validation && $validation->getVatRequestSuccess() == false) {
                $this->logger->debug("aroundGetRateRequest Technical error.");
                $taxClassToSet = $this->configHelper->getConsumerTaxClass();
            }
        } else {
            $this->logger->debug("aroundGetRateRequest no VAT number - apply VAT");
            $taxClassToSet = $this->configHelper->getConsumerTaxClass();
        }

        if (isset($taxClassToSet)) {
            $this->logger->debug("aroundGetRateRequest evaluated class id: ".$taxClassToSet);
            $returnRequest = $proceed($shippingAddress, $billingAddress, $taxClassToSet, $store, $customerId);
        } else {
            $returnRequest = $proceed($shippingAddress, $billingAddress, $customerTaxClass, $store, $customerId);
        }

        // Calculate tax amount based on threshold country if needed
        if (//$returnRequest->getCountryId() == $shopCc &&
            $this->configHelper->getEnableTresholdCountries()
            && $this->configHelper->isThresholdCountry($customerCountryCode)
            && $this->configHelper->isCbtEnabled()
            && ($this->configHelper->getDisableCbtForEuBusiness() || $this->configHelper->getDisableCbtForOutOfEurope())
        ) {
            $this->logger->debug("aroundGetRateRequest CBT enabled and threshold country $customerCountryCode.");
            $returnRequest->setCountryId($customerCountryCode);
        }

        // Check which rate is actually applied
        /*
        $productTaxClass = $returnRequest->getProductClassId();
        if(empty($productTaxClass)) {
            $returnRequest->setProductClassId(1);
        }
        $this->logger->debug("aroundGetRateRequest modified request data:", $returnRequest->getData());
        $rate = $subject->getRate($returnRequest);
        $this->logger->debug("aroundGetRateRequest calculated rate: ".$rate);
        */

        return $returnRequest;
    }
}
