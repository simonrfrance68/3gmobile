<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin\Tax;

use Geissweb\Euvat\Model\System\Config\Source\DynamicShipping;
use Magento\Framework\App\Area;

/**
 * Class Config
 * @package Geissweb\Euvat\Plugin\Tax
 */
class Config
{

    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    public $configHelper;

    /**
     * @var \Geissweb\Euvat\Model\ValidationRepository
     */
    public $validationRepository;

    /**
     * @var \Magento\Checkout\Model\Session
     */
    public $checkoutSession;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * @var \Magento\Quote\Api\CartRepositoryInterface
     */
    public $cartRepository;

    /**
     * @var \Magento\Customer\Model\Session
     */
    public $customerSession;

    /**
     * @var int
     */
    public $_customerGroup;

    /**
     * @var array
     */
    public $_cartProductDisplayRules;
    /**
     * @var array
     */
    public $_catalogProductDisplayRules;
    /**
     * @var array
     */
    public $_cartSubtotalDisplayRules;

    /**
     * @var \Magento\Framework\App\State
     */
    private $appState;
    /**
     * @var \Magento\Backend\Model\Session\Quote
     */
    private $backendSessionQuote;

    /**
     * TaxConfig constructor.
     *
     * @param \Geissweb\Euvat\Helper\Configuration       $configHelper
     * @param \Geissweb\Euvat\Model\ValidationRepository $validationRepository
     * @param \Magento\Checkout\Model\Session            $checkoutSession
     * @param \Magento\Customer\Model\Session            $customerSession
     * @param \Magento\Quote\Api\CartRepositoryInterface $cartRepository
     * @param \Magento\Framework\App\State               $appState
     * @param \Magento\Backend\Model\Session\Quote       $backendSessionQuote
     * @param \Geissweb\Euvat\Logger\Logger              $logger
     */
    public function __construct(
        \Geissweb\Euvat\Helper\Configuration $configHelper,
        \Geissweb\Euvat\Model\ValidationRepository $validationRepository,
        \Magento\Checkout\Model\Session $checkoutSession,
        \Magento\Customer\Model\Session $customerSession,
        \Magento\Quote\Api\CartRepositoryInterface $cartRepository,
        \Magento\Framework\App\State $appState,
        \Magento\Backend\Model\Session\Quote $backendSessionQuote,
        \Geissweb\Euvat\Logger\Logger $logger
    ) {
        $this->configHelper = $configHelper;
        $this->validationRepository = $validationRepository;
        $this->checkoutSession = $checkoutSession;
        $this->customerSession = $customerSession;
        $this->cartRepository = $cartRepository;
        $this->logger = $logger;
        $this->appState = $appState;
        $this->backendSessionQuote = $backendSessionQuote;

        //$this->_customerGroup = $this->customerSession->getCustomer()->getGroupId();
        $this->_customerGroup = $this->customerSession->getCustomerGroupId();

        $this->_catalogProductDisplayRules = $this->configHelper->getCatalogPriceDisplayTypeRules();
        $this->_cartProductDisplayRules = $this->configHelper->getCartProductPriceDisplayTypeRules();
        $this->_cartSubtotalDisplayRules = $this->configHelper->getCartSubtotalPriceDisplayTypeRules();
    }

    /**
     * @param $subject \Magento\Tax\Model\Config
     * @param $result  bool
     *
     * @return bool
     */
    public function afterDisplayCartSubtotalInclTax($subject, $result)
    {
        $this->logger->debug('afterDisplayCartSubtotalInclTax default result: '.(int)$result);
        $this->logger->debug('afterDisplayCartSubtotalInclTax current group: '.$this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartSubtotalDisplayRules)) {
            $type = $this->_cartSubtotalDisplayRules[$this->_customerGroup];
            $this->logger->debug('afterDisplayCartPricesInclTax found rule: '.$type.' (result: '.(int)$subject::DISPLAY_TYPE_INCLUDING_TAX === $type.')');
            return $subject::DISPLAY_TYPE_INCLUDING_TAX === $type;
        }
        return $result;
    }

    /**
     * @param $subject \Magento\Tax\Model\Config
     * @param $result  bool
     *
     * @return bool
     */
    public function afterDisplayCartSubtotalExclTax($subject, $result)
    {
        $this->logger->debug('afterDisplayCartSubtotalExclTax default result: '.(int)$result);
        $this->logger->debug('afterDisplayCartSubtotalExclTax current group: '.$this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartSubtotalDisplayRules)) {
            $type = $this->_cartSubtotalDisplayRules[$this->_customerGroup];
            $this->logger->debug('afterDisplayCartSubtotalExclTax found rule: '.$type.' (result: '.(int)$subject::DISPLAY_TYPE_EXCLUDING_TAX === $type.')');
            return $subject::DISPLAY_TYPE_EXCLUDING_TAX === $type;
        }
        return $result;
    }

    /**
     * @param $subject \Magento\Tax\Model\Config
     * @param $result  bool
     *
     * @return bool
     */
    public function afterDisplayCartSubtotalBoth($subject, $result)
    {
        $this->logger->debug('afterDisplayCartSubtotalBoth default result: '.(int)$result);
        $this->logger->debug('afterDisplayCartSubtotalBoth current group: '.$this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartSubtotalDisplayRules)) {
            $type = $this->_cartSubtotalDisplayRules[$this->_customerGroup];
            $this->logger->debug('afterDisplayCartSubtotalExclTax found rule: '.$type.' (result: '.(int)$subject::DISPLAY_TYPE_BOTH === $type.')');
            return $subject::DISPLAY_TYPE_BOTH === $type;
        }
        return $result;
    }



    /**
     * @param $subject \Magento\Tax\Model\Config
     * @param $result  bool
     *
     * @return bool
     */
    public function afterDisplayCartPricesInclTax($subject, $result)
    {
        $this->logger->debug('afterDisplayCartPricesInclTax default result: '.(int)$result);
        $this->logger->debug('afterDisplayCartPricesInclTax current group: '.$this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartProductDisplayRules)) {
            $type = $this->_cartProductDisplayRules[$this->_customerGroup];
            $this->logger->debug('afterDisplayCartPricesInclTax found rule: '.$type);
            return $subject::DISPLAY_TYPE_INCLUDING_TAX === $type;
        }
        return $result;
    }

    /**
     * @param $subject \Magento\Tax\Model\Config
     * @param $result  bool
     *
     * @return bool
     */
    public function afterDisplayCartPricesExclTax($subject, $result)
    {
        $this->logger->debug('afterDisplayCartPricesExclTax default result: '.(int)$result);
        $this->logger->debug('afterDisplayCartPricesExclTax current group: '.$this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartProductDisplayRules)) {
            $type = $this->_cartProductDisplayRules[$this->_customerGroup];
            $this->logger->debug('afterDisplayCartPricesExclTax found rule: '.$type);
            return $subject::DISPLAY_TYPE_EXCLUDING_TAX === $type;
        }
        return $result;
    }

    /**
     * @param $subject \Magento\Tax\Model\Config
     * @param $result  bool
     *
     * @return bool
     */
    public function afterDisplayCartPricesBoth($subject, $result)
    {
        $this->logger->debug('afterDisplayCartPricesBoth default result: '.(int)$result);
        $this->logger->debug('afterDisplayCartPricesBoth current group: '.$this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_cartProductDisplayRules)) {
            $type = $this->_cartProductDisplayRules[$this->_customerGroup];
            $this->logger->debug('afterDisplayCartPricesBoth found rule: '.$type);
            return $subject::DISPLAY_TYPE_BOTH === $type;
        }
        return $result;
    }

    /**
     * Dynamic catalog price display
     *
     *  1 - Excluding tax
     *  2 - Including tax
     *  3 - Both
     *
     * @param \Magento\Tax\Model\Config $subject
     * @param int                       $type
     *
     * @return int
     */
    public function afterGetPriceDisplayType(\Magento\Tax\Model\Config $subject, $type)
    {
        $this->logger->debug('afterGetPriceDisplayType current group: '.$this->_customerGroup);
        if (array_key_exists($this->_customerGroup, $this->_catalogProductDisplayRules)) {
            $this->logger->debug('afterGetPriceDisplayType found rule: '.$type);
            $type = $this->_catalogProductDisplayRules[$this->_customerGroup];
        }
        $this->logger->debug('afterGetPriceDisplayType return '.$type);
        return $type;
    }

    /**
     * @param \Magento\Tax\Model\Config $subject
     * @param                           $result
     *
     * @return bool
     */
    public function afterCrossBorderTradeEnabled(\Magento\Tax\Model\Config $subject, $result)
    {
        try {
            if ($result) {
                $basedOn = $this->configHelper->getVatBasedOn();
                $basedOnAddress = false;

                //Backend
                if ($this->appState->getAreaCode() === Area::AREA_ADMINHTML) {
                    $this->logger->debug("afterCrossBorderTradeEnabled processing AdminOrder.");
                    $backendQuote = $this->backendSessionQuote->getQuote();
                    if ($basedOn == 'shipping') {
                        $basedOnAddress = $backendQuote->getShippingAddress();
                    } else {
                        $basedOnAddress = $backendQuote->getBillingAddress();
                    }

                //Frontend
                } else {
                    $quoteId = $this->checkoutSession->getQuoteId();
                    if (!empty($quoteId)) {
                        $this->logger->debug("afterCrossBorderTradeEnabled processing FrontQuote ID: $quoteId");
                        /** @var \Magento\Quote\Api\Data\CartInterface|\Magento\Quote\Model\Quote $quote */
                        $quote = $this->cartRepository->get($quoteId);
                        if ($basedOn == 'shipping' && !$quote->getIsVirtual()) {
                            $basedOnAddress = $quote->getShippingAddress();
                        } else {
                            $basedOnAddress = $quote->getBillingAddress();
                        }

                        $countryId = $basedOnAddress->getCountryId();
                        if (empty($countryId)) {
                            $this->logger->debug("afterCrossBorderTradeEnabled did not find countryID from quote address, use default");
                            if ($basedOn == 'shipping') {
                                $basedOnAddress = $this->customerSession->getCustomer()->getDefaultShippingAddress();
                            } else {
                                $basedOnAddress = $this->customerSession->getCustomer()->getDefaultBillingAddress();
                            }
                        }
                    } else {
                        $this->logger->debug("afterCrossBorderTradeEnabled using default addresses");
                        if ($basedOn == 'shipping') {
                            $basedOnAddress = $this->customerSession->getCustomer()->getDefaultShippingAddress();
                        } else {
                            $basedOnAddress = $this->customerSession->getCustomer()->getDefaultBillingAddress();
                        }
                    }
                }

                if ($basedOnAddress === false || $basedOnAddress === null) {
                    $this->logger->debug("afterCrossBorderTradeEnabled no Address!");
                    return $result;
                }

                $countryId = $basedOnAddress->getCountryId();
                if (empty($countryId)) {
                    $this->logger->debug("afterCrossBorderTradeEnabled no CountryID!", $basedOnAddress->debug());
                    return $result;
                }
                $this->logger->debug("afterCrossBorderTradeEnabled CountryID: $countryId");
                $this->logger->debug("afterCrossBorderTradeEnabled !isEuCountry($countryId): "
                                     .!$this->configHelper->isEuCountry($countryId));

                //Magic starts here
                if (!$this->configHelper->isEuCountry($countryId)
                    && $this->configHelper->getDisableCbtForOutOfEurope()
                ) {
                    $this->logger->debug("afterCrossBorderTradeEnabled disableCbtForOutOfEurope");
                    $result = false;

                } elseif (($basedOnAddress && $basedOnAddress->getVatId())
                          && $this->configHelper->getDisableCbtForEuBusiness()
                ) {
                    /** @var \Geissweb\Euvat\Api\Data\ValidationInterface $validation */
                    $validation = $this->validationRepository->getByVatId($basedOnAddress->getVatId());
                    if ($validation && $validation->getVatRequestSuccess() && $validation->getVatIsValid()) {
                        $this->logger->debug("afterCrossBorderTradeEnabled disableCbtForEuBusiness");
                        $result = false;
                    }
                }
            }
            $this->logger->debug("afterCrossBorderTradeEnabled result: ".(int)$result);
            return $result;

        } catch (\Exception $e) {
            $this->logger->critical($e);
        }
    }

    /**
     * @param \Magento\Tax\Model\Config $subject
     * @param                           $result
     *
     * @return mixed
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function afterGetShippingTaxClass(\Magento\Tax\Model\Config $subject, $result)
    {
        $this->logger->debug("afterGetShippingTaxClass START result: $result");

        $reducedProductClass   = $this->configHelper->getReducedProductTaxClass();
        $reducedShippingClass  = $this->configHelper->getReducedShippingTaxClass();
        $useDynamicShippingTax = $this->configHelper->getUseDynamicShippingTaxClass();

        if ($useDynamicShippingTax > 0 && $reducedProductClass && $reducedShippingClass) {

            $this->logger->debug("afterGetShippingTaxClass useDynamicShippingTax");

            //Backend
            if ($this->appState->getAreaCode() === Area::AREA_ADMINHTML) {
                $this->logger->debug("afterGetShippingTaxClass processing AdminOrder.");
                $items = $this->backendSessionQuote->getQuote()->getAllVisibleItems();
            //Frontend
            } else {
                /**@var \Magento\Quote\Model\Quote\Item[] $items */
                $quoteId = $this->checkoutSession->getQuoteId();
                if (!empty($quoteId)) {
                    $this->logger->debug("afterGetShippingTaxClass processing FrontQuote.");
                    $quote = $this->cartRepository->get($quoteId);
                    $items = $quote->getItems();
                }
            }

            if (!isset($items) || !is_array($items)) {
                return $result;
            }

            switch ($useDynamicShippingTax) {
                case DynamicShipping::TYPE_BY_RATE_WITH_LARGEST_TOTAL:
                    $this->logger->debug("afterGetShippingTaxClass TYPE_BY_RATE_WITH_LARGEST_TOTAL");
                    $totals = [];
                    foreach ($items as $item) {
                        if (isset($totals[$item->getProduct()->getTaxClassId()])) {
                            $totals[$item->getProduct()->getTaxClassId()] += $item->getPrice() * $item->getQty();
                        } else {
                            $totals[$item->getProduct()->getTaxClassId()] = $item->getPrice() * $item->getQty();
                        }
                    }
                    $this->logger->debug("afterGetShippingTaxClass calculated totals:", $totals);

                    arsort($totals);
                    reset($totals);
                    $classToUse = key($totals);
                    if ($classToUse === $reducedProductClass) {
                        $this->logger->debug("afterGetShippingTaxClass using reduced shipping: $reducedShippingClass");
                        return $reducedShippingClass;
                    }
                    break;

                case DynamicShipping::TYPE_BY_RATE_WITH_HIGHEST_RATE:
                    $this->logger->debug("afterGetShippingTaxClass TYPE_BY_RATE_WITH_HIGHEST_RATE");
                    $useReducedShippingTax = null;

                    foreach ($items as $item) {
                        if ($useReducedShippingTax !== false) {
                            $useReducedShippingTax = $item->getProduct()->getTaxClassId() == $reducedProductClass;
                        }
                    }
                    if ($useReducedShippingTax === true) {
                        $this->logger->debug("afterGetShippingTaxClass using reduced shipping: $reducedShippingClass");
                        return $reducedShippingClass;
                    }
                    break;

                case DynamicShipping::TYPE_DEFAULT:
                default:
                    break;
            }
        }
        return $result;
    }
}
