<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin\CheckoutLayout;

/**
 * Class CheckoutLayout
 * @package Geissweb\Euvat\Plugin
 */
class DefaultCheckout
{
    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    public $configHelper;

    /**
     * @var \Magento\Framework\Module\Manager
     */
    public $moduleManager;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    public $logger;

    /**
     * CheckoutLayout constructor.
     *
     * @param \Geissweb\Euvat\Helper\Configuration $config
     * @param \Magento\Framework\Module\Manager    $moduleManager
     * @param \Geissweb\Euvat\Logger\Logger        $logger
     */
    public function __construct(
        \Geissweb\Euvat\Helper\Configuration $config,
        \Magento\Framework\Module\Manager $moduleManager,
        \Geissweb\Euvat\Logger\Logger $logger
    ) {
        $this->configHelper = $config;
        $this->moduleManager = $moduleManager;
        $this->logger = $logger;
    }

    /**
     * @param \Magento\Checkout\Block\Checkout\LayoutProcessor $subject
     * @param array $jsLayout
     * @return array $jsLayout
     */
    public function afterProcess(
        \Magento\Checkout\Block\Checkout\LayoutProcessor $subject,
        array $jsLayout
    ) {
        $originalLayout = [];
        if (isset($jsLayout['components']['checkout']['children']['steps']['children']['shipping-step']['children']
            ['shippingAddress']['children']['shipping-address-fieldset']['children']['vat_id'])
        ) {
            $originalLayout = $jsLayout['components']['checkout']['children']['steps']['children']['shipping-step']['children']
            ['shippingAddress']['children']['shipping-address-fieldset']['children']['vat_id'];
            $this->logger->debug("OriginalLayout: ".var_export($originalLayout, true));
        }

        $configParam = isset($originalLayout['config']) ? $originalLayout['config'] : [];
        $fieldLayout = [
            'label' => __('VAT Number'),
            'component' => 'Geissweb_Euvat/js/form/element/vat-number-co',
            'config' => $this->configHelper->getVatFieldConfig($configParam, 'shippingAddress'),
            'dataScope' => 'shippingAddress.vat_id',
            'provider' => 'checkoutProvider',
            'visible' => true,
            'sortOrder' => isset($originalLayout['sortOrder']) ? $originalLayout['sortOrder'] : 120,
            'validation' => $this->configHelper->getFieldValidationAtCheckout()
        ];
        $fieldLayout = array_merge($originalLayout, $fieldLayout);

        if ($this->moduleManager->isEnabled('Magestore_OneStepCheckout')
           && $this->configHelper->getConfig('onestepcheckout/general/active') == true
        ) {
            $fieldLayout['component'] = 'Geissweb_Euvat/js/form/element/vat-number-magestore-opc';
            $fieldLayout['config']['template'] = 'Geissweb_Euvat/vatfield-magestore';
        }

        //Add field to shipping address
        $jsLayout['components']['checkout']['children']['steps']['children']['shipping-step']['children']
        ['shippingAddress']['children']['shipping-address-fieldset']['children']['vat_id'] = $fieldLayout;

        $this->logger->debug(var_export($jsLayout['components']['checkout']['children']['steps']['children']['shipping-step']['children']
        ['shippingAddress']['children']['shipping-address-fieldset']['children']['vat_id'], true));

        //Add field to billing addresses
        if (isset($jsLayout['components']['checkout']['children']['steps']['children']['billing-step']['children']
            ['payment']['children']['payments-list']['children'])
        ) {
            foreach ($jsLayout['components']['checkout']['children']['steps']['children']['billing-step']['children']
                     ['payment']['children']['payments-list']['children'] as $paymentGroup => $groupConfig) {
                if ($paymentGroup !== 'before-place-order'
                    && $paymentGroup !== 'paypal-captcha'
                ) {
                    $scopeName = str_replace("-form", '', $paymentGroup);
                    $fieldLayout['config'] = $this->configHelper->getVatFieldConfig($configParam, 'billingAddress'.$scopeName);
                    $fieldLayout['dataScope'] = 'billingAddress'.$scopeName.'.vat_id';
                    $jsLayout['components']['checkout']['children']['steps']['children']['billing-step']['children']
                    ['payment']['children']['payments-list']['children'][$paymentGroup]['children']
                    ['form-fields']['children']['vat_id'] = $fieldLayout;
                }
            }
        }

        //Add field to billing address when address is set to be shown on "Payment Page" instead of "Payment Method"
        if (isset($jsLayout['components']['checkout']['children']['steps']['children']['billing-step']['children']
            ['payment']['children']['afterMethods']['children']['billing-address-form']['children']['form-fields']
            ['children']['vat_id'])
        ) {
            $billingFieldLayout = $jsLayout['components']['checkout']['children']['steps']['children']['billing-step']['children']
            ['payment']['children']['afterMethods']['children']['billing-address-form']['children']['form-fields']
            ['children']['vat_id'];

            $billingConfigParam = isset($billingFieldLayout['config']) ? $billingFieldLayout['config'] : [];
            $euvatBillingFieldLayout = [
                'component' => 'Geissweb_Euvat/js/form/element/vat-number-co',
                'config' => $this->configHelper->getVatFieldConfig($billingConfigParam, 'billingAddressshared'),
                'dataScope' => 'billingAddressshared.vat_id',
                'provider' => 'checkoutProvider',
                'visible' => true,
                'validation' => $this->configHelper->getFieldValidationAtCheckout(),
                //'imports' => [
                //    'setBillingVisibility' => 'checkout.steps.billing-step.payment.afterMethods.billing-address-form.form-fields.country_id:value'
                //]
            ];
            $billingFieldLayout = array_merge($billingFieldLayout, $euvatBillingFieldLayout);
            $jsLayout['components']['checkout']['children']['steps']['children']['billing-step']['children']
            ['payment']['children']['afterMethods']['children']['billing-address-form']['children']['form-fields']
            ['children']['vat_id'] = $billingFieldLayout;

            $this->logger->debug(var_export($jsLayout['components']['checkout']['children']['steps']['children']['billing-step']['children']
            ['payment']['children']['afterMethods']['children']['billing-address-form']['children']['form-fields']
            ['children']['vat_id'], true));
        }

        return $jsLayout;
    }
}
