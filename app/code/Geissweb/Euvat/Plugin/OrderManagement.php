<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Plugin;

class OrderManagement
{
    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    private $configHelper;

    /**
     * @var \Geissweb\Euvat\Logger\Logger
     */
    private $logger;

    /**
     * @var \Geissweb\Euvat\Helper\Functions
     */
    private $functionsHelper;

    /**
     * @var \Geissweb\Euvat\Model\ValidationRepository
     */
    private $validationRepository;

    /**
     * @var \Geissweb\Euvat\Model\Validation
     */
    private $validationInterface;

    /**
     * OrderManagement constructor.
     *
     * @param \Geissweb\Euvat\Helper\Configuration       $configHelper
     * @param \Geissweb\Euvat\Helper\Functions           $functionsHelper
     * @param \Geissweb\Euvat\Model\ValidationRepository $validationRepository
     * @param \Geissweb\Euvat\Model\Validation           $validationInterface
     * @param \Geissweb\Euvat\Logger\Logger              $logger
     */
    public function __construct(
        \Geissweb\Euvat\Helper\Configuration $configHelper,
        \Geissweb\Euvat\Helper\Functions $functionsHelper,
        \Geissweb\Euvat\Model\ValidationRepository $validationRepository,
        \Geissweb\Euvat\Model\Validation $validationInterface,
        \Geissweb\Euvat\Logger\Logger $logger
    ) {
        $this->configHelper = $configHelper;
        $this->logger = $logger;
        $this->functionsHelper = $functionsHelper;
        $this->validationRepository = $validationRepository;
        $this->validationInterface = $validationInterface;
    }

    /**
     * @param \Magento\Sales\Api\OrderManagementInterface $subject
     * @param \Magento\Sales\Api\Data\OrderInterface      $order
     */
    public function beforePlace(
        \Magento\Sales\Api\OrderManagementInterface $subject,
        \Magento\Sales\Api\Data\OrderInterface $order
    ) {
        /**@var $order \Magento\Sales\Model\Order */

        $this->logger->debug("beforePlaceOrder ".$order->getIncrementId()." Start:");

        $vatBasedOn = $this->configHelper->getVatBasedOn();
        if ($vatBasedOn == 'shipping') {
            $address = $order->getShippingAddress();
        } else {
            $address = $order->getBillingAddress();
        }

        if (!$address instanceof \Magento\Sales\Api\Data\OrderAddressInterface) {
            $this->logger->debug("beforePlaceOrder address (".get_class($address)."), getting again from order");
            $address = $this->functionsHelper->getBasedOnAddressFromOrder($order, $vatBasedOn);
        }
        if ($address == false || $address == null) {
            $this->logger->debug("beforePlaceOrder NO address found.");
            return;
        }

        try {
            $vatId = $address->getVatId();
            if (!empty($vatId)) {
                /** @var \Geissweb\Euvat\Api\Data\ValidationInterface $validation */
                $validation = $this->validationRepository->getByVatId($vatId);
                if ($validation instanceof \Geissweb\Euvat\Api\Data\ValidationInterface) {
                    // Add order comment with VAT validation data
                    $comment = $this->_compileOrderComment($validation);
                    if (!empty($comment)) {
                        $this->logger->debug("beforePlaceOrder Adding comment: ".$comment);
                        $order->addStatusHistoryComment($comment);
                    }
                }
            } else {
                $validation = $this->validationInterface;
            }

            // Assign customer group to guest order
            if ($order->getCustomerIsGuest()
               && $this->configHelper->getUseGroupAssignment()
               && $this->configHelper->isAssignCustomerGroupToGuestOrder()
            ) {
                $customerGroupForOrder = $this->functionsHelper->getCustomerGroup($address, $validation);
                $this->logger->debug("beforePlaceOrder Setting group_id: ".$customerGroupForOrder);
                $order->setCustomerGroupId($customerGroupForOrder);
            }

        } catch (\Exception $e) {
            $this->logger->critical($e);
        }

        $this->logger->debug("beforePlaceOrder END");

        return;
    }


    /**
     * @param \Geissweb\Euvat\Api\Data\ValidationInterface $validation
     *
     * @return string
     */
    private function _compileOrderComment($validation)
    {
        $vatId = $validation->getVatId();
        $vatTraderName = $validation->getVatTraderName();
        $vatTraderAddress = $validation->getVatTraderAddress();
        $vatIsValid = $validation->getVatIsValid();
        $vatReqSuccess = $validation->getVatRequestSuccess();
        $vatReqId = $validation->getVatRequestId();

        $comment = '';
        $comment .= __('VAT number').": ".$vatId."<br/>";
        if (!empty($vatTraderName)) {
            $comment .= __('VAT Trader Name').": ".$vatTraderName."<br/>";
        }
        if (!empty($vatTraderAddress)) {
            $comment .= __('VAT Trader Address').": ".$vatTraderAddress."<br/>";
        }
        $comment .= __('VAT number is').": ";
        $comment .= ($vatIsValid) ? __('valid') : __('invalid');
        $comment .= "<br/>";
        $comment .= __('VAT request success').": ";
        $comment .= ($vatReqSuccess) ? __('Yes') : __('No');
        $comment .= "<br/>";
        if ($vatReqSuccess && !empty($vatReqId)) {
            $comment .= __('VAT request identifier').": ".$vatReqId;
        }

        return $comment;
    }
}
