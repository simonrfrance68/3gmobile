/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS Webl√∂sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

define([
    'jquery',
    'Geissweb_Euvat/js/form/element/vat-number-co',
    'Geissweb_Euvat/js/queue',
    'Magento_Ui/js/lib/validation/validator',
    'Magento_Checkout/js/checkout-data',
    'Magento_Checkout/js/action/set-billing-address',
    'Magento_Checkout/js/action/set-shipping-information',
    'Magento_Checkout/js/model/quote',
    'Magento_Checkout/js/model/shipping-rates-validator',
    'Mageplaza_Osc/js/action/payment-total-information',
    'Mageplaza_Osc/js/action/set-checkout-information',
    'Mageplaza_Osc/js/model/osc-data'
], function ($, VatNumberCo, queue, validator, checkoutData, setBillingAddress, setShippingInfo, Quote, ShippingRatesValidator, totalsUpdate, setCheckoutInfo, oscData) {
    'use strict';

    return VatNumberCo.extend({

        defaults: {
            imports: {
            }
        },

        initialize: function (options) {
            this.element = this._super();
            this.initObservable().setCssClasses();
            var self = this;

            if (this.debug) {
                console.log('vatNumberMageplaza init', this);
                console.log('vatNumberMageplaza options', options);
            }

            return this;
        },

        setCssClasses: function () {

            if (this.containerClasses === null) {
                var containerClasses = ['field'];
                containerClasses.push('col-mp');
                containerClasses.push('mp-6');
                containerClasses.push('gw-euvat-field');
                containerClasses.forEach(function (name) {
                    this.containerClasses += " "+name;
                }, this);
                this.containerClasses = this.containerClasses.trim();
            }
            if (this.debug) {
                console.log("co containerClasses: "+this.containerClasses);
            }

            if (this.classes === null) {
                var classes = ['input-text'];
                for (var property in this.validation) {
                    if (this.validation.hasOwnProperty(property)) {
                        classes.push(property);
                    }
                }
                this.classes = "";
                classes.forEach(function (name) {
                    this.classes += " "+name;
                }, this);
                this.classes = this.classes.trim();
            }

            if (this.debug) {
                console.log("co classes: "+this.classes);
            }
        },

        addToQuoteAddress: function (address) {
            var self = this;
            if ( (typeof(address.vatId) === 'string' && address.vatId.length <= 0)
                || typeof(address.vatId) === 'undefined'
                || address.vatId === null
            ) {
                if (this.debug) {
                    console.log("Assigning address VAT number");
                }
                address.vatId = self.value();
            } else if (self.value() === "" || self.value() === null) {
                if (this.debug) {
                    console.log("Removing address VAT number");
                }
                address.vatId = "";
            }
        },

        afterValidation: function (jqXHR) {
            if (this.debug) {
                console.log("afterValidation() [dataScope: "+this.dataScope+"]");
                console.log("oscData", oscData.getData());
            }

            var shippingAddress = Quote.shippingAddress();
            var billingAddress = Quote.billingAddress();
            if (this.debug) {
                console.log("Billing Address", billingAddress);
                console.log("Shipping Address", shippingAddress);
            }

            var self = this;
            queue.addFunction(function () {
                if (typeof(self.dataScope) === 'string') {
                    if (self.dataScope === 'shippingAddress.vat_id') {
                        self.addToQuoteAddress(shippingAddress);
                    } else if (self.dataScope === 'billingAddress.vat_id') {
                        self.addToQuoteAddress(billingAddress);
                    }
                }
            }).addFunction(function () {
                var deferred = new $.Deferred();
                if (self.countryCode.length > 0) {
                    $('body').trigger('processStop');
                    return self.updateCountry(self.countryCode, deferred);
                }
            });

            if (this.parentScope === 'billingAddress') {
                queue.addFunction(function () {
                    $.when(setBillingAddress()).done(function () {
                        if (self.debug) {
                            console.log("setBillingAddress done");
                        }
                    });
                });
            }

            if (this.parentScope === 'shippingAddress') {
                queue.addFunction(function () {
                    if (!Quote.isVirtual()) {
                        $.when(setShippingInfo()).done(function () {
                            if (self.debug) {
                                console.log("setShippingInfo done");
                            }
                        });
                    }
                });
            }

            queue.addFunction(function () {
                $.when(setCheckoutInfo()).done(function () {
                    if (self.debug) {
                        console.log("setCheckoutInfo done");
                    }
                    $.when(totalsUpdate()).done(function () {
                        if (self.debug) {
                            console.log("totalsUpdate done");
                        }
                    });
                });
            });

            return queue.run();
        }

    });
});