/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

define([
    'jquery',
    'Geissweb_Euvat/js/form/element/vat-number-base',
    'Geissweb_Euvat/js/queue',
    'mageUtils',
    'mage/translate',
    'Magento_Ui/js/modal/confirm'
], function ($, BaseVatNumber, queue, Utils, $t, confirm) {
    'use strict';

    return BaseVatNumber.extend({

        initialize: function (options) {
            this.element = this._super();
            this.isOutOfUiScope = true;
            this.inputName = 'vat_id';
            if (this.debug) {
                console.log('vatNumberFront options', options);
                console.log('vatNumberFront init', this);
            }
            var self = this;

            $.validator.addMethod('valid-vat-required', function (value) {
                return self._ruleValidVat(value);
            }, $t(self.validVatRequiredMessage));
            $.validator.addMethod('valid-vat-if-specified', function (value) {
                return self._ruleValidVatIfSpecified(value);
            }, $t(self.validVatIfSpecifiedMessage));

            // When on register page
            if (this.handle === 'customer_account_create') {
                this.validation = this.validation_registration;
                $('#vat_number_container').appendTo('fieldset.address');
            }

            // When on address edit page
            if (this.handle === 'customer_address_form') {
                this.validation = this.validation_addressedit;
                this.importValue($('div.taxvat input[name="vat_id"]').val());
                $('div.taxvat').empty().addClass('fields');
                setTimeout(function () {
                    $('#vat_number_container').appendTo('div.taxvat');
                    setTimeout(function () {
                        $('#gw-euvat-field').insertAfter('div.taxvat')
                    }, 100);
                }, 50);
            }

            for (var property in this.validation) {
                if (this.validation.hasOwnProperty(property)
                    && property === 'valid-vat-required'
                ) {
                    _.extend(this.additionalClasses, {
                        _required: true
                    });
                }
            }
            this.initObservable()
                .setCssClasses();

            // Set initial visibility
            if (this.vatFrontendVisibility === false) {
                this.visible(false);
            } else {
                this.setVisibility(this.getCountry());
            }

            // Toggle visibility based on country selection
            $('#country').change(function () {
                self.setVisibility(self.getCountry());
            });

            return this;
        },

        setCssClasses: function () {
            if (this.classes === null) {
                var classes = ['input-text'];
                for (var property in this.validation) {
                    if (this.validation.hasOwnProperty(property)) {
                        classes.push(property);
                    }
                }
                this.classes = "";
                classes.forEach(function (name) {
                    this.classes += " "+name;
                }, this);
            }
            this.classes = this.classes.trim();
            if (this.debug) {
                console.log("front classes: "+this.classes);
            }
        },

        afterValidation: function (jqXHR) {
            var self = this;

            queue.addFunction(function () {
                if (self.isValidated() && self.isValidVatNumber()) {
                    $('#'+self.uid).removeClass('mage-error').attr('aria-invalid', false);
                    $('#'+self.uid+'-error').remove();
                }
            });

            queue.addFunction(function () {
                var deferred = new $.Deferred();
                if (self.countryCode.length > 0) {
                    $('body').trigger('processStop');
                    return self.updateCountry(self.countryCode, deferred);
                }
            });
            return queue.run();
        },

        /**
         * @param {String} value
         * @param deferred
         */
        updateCountry: function (value, deferred) {
            deferred = deferred || $.Deferred();
            var countryEl = $('#country');

            if (!value
                || !this.askCustomerCountryCorrection
                || typeof(countryEl) !== 'object'
                || Utils.isEmpty(countryEl.val())
                || $.inArray(value, this.allowedCountries) === -1
            ) {
                deferred.resolve();
                return deferred.promise();
            }

            if (value === 'EL') {
                value = 'GR';
            }

            if (value !== countryEl.val()) {
                var self = this;
                confirm({
                    title: $t('VAT number validation result'),
                    content: $t('The country prefix of your VAT Number does not match your address country. Shall we automatically set the country?'),
                    actions: {
                        confirm: function () {
                            countryEl.val(value).change();
                        },
                        cancel: function () {
                            self.countryCode = '';
                            self.value('');
                            self.clearMessages();
                        },
                        always: function () {
                            deferred.resolve();
                        }
                    }
                });
            } else {
                deferred.resolve();
            }
            return deferred.promise();
        },

        getCountry: function () {
            var countryEl = $('#country');
            if (typeof(countryEl) !== 'object'
                || Utils.isEmpty(countryEl.val())
            ) {
                if (this.debug) {
                    console.log("front getCountry(), no country found.");
                }
                return null;
            } else {
                if (this.debug) {
                    console.log("front getCountry(): "+countryEl.val());
                }
                return countryEl.val();
            }
        },

        importValue: function (value) {
            this.isImport = true;
            this.value(value);
            this.checkCached(value);
            this.isImport = false;
        }

    });

});