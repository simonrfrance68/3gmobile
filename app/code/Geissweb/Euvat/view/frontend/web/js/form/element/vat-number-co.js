/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

define([
    'jquery',
    'Geissweb_Euvat/js/form/element/vat-number-base',
    'Geissweb_Euvat/js/queue',
    'Magento_Ui/js/lib/validation/validator',
    'Magento_Checkout/js/model/shipping-rates-validator',
    'Geissweb_Euvat/js/model/reload',
    'uiRegistry',
    'mageUtils'
], function ($, VatNumberBase, queue, validator, ShippingRatesValidator, Reloader, uiRegistry, Utils) {
    'use strict';

    return VatNumberBase.extend({

        defaults: {
            isBillingField: false
        },

        initialize: function (options) {
            this.element = this._super();
            this.initObservable().setCssClasses();
            var self = this;
            if (this.debug) {
                console.log('vatNumberCo init', this);
                console.log('vatNumberCo options', options);
            }

            validator.addRule('valid-vat-required', function (value) {
                return self._ruleValidVat(value);
            }, this.validVatRequiredMessage);

            validator.addRule('valid-vat-if-specified', function (value) {
                return self._ruleValidVatIfSpecified(value);
            }, this.validVatIfSpecifiedMessage);

            for (var property in this.validation) {
                if (this.validation.hasOwnProperty(property)
                    && property === 'valid-vat-required'
                ) {
                    _.extend(this.additionalClasses, {
                        _required: true
                    });
                }
            }

            if (this.parentScope === 'shippingAddress') {
                if (this.debug) {
                    console.log("Binding to ShippingRatesValidator", this.element);
                }
                if (options.delay === 'undefined') {
                    options.delay = 0;
                }
                ShippingRatesValidator.bindHandler(this.element, options.delay + 1600);
            }

            this.isBillingField = RegExp('billing', 'i').test(this.parentScope);
            if (this.debug) {
                console.log('isBillingField', this.isBillingField);
            }

            uiRegistry.async('checkoutProvider')(function (checkoutProvider) {

                if (!Utils.isEmpty(self.parentScope) && self.isBillingField) {
                    checkoutProvider.on(self.parentScope, function (billingAddressData) {
                        self.setBillingVisibility(billingAddressData.country_id, self.parentScope);
                    });
                } else if (!Utils.isEmpty(self.parentScope) && self.parentScope === 'shippingAddress') {
                    checkoutProvider.on('shippingAddress', function (shippingAddressData) {
                        self.setShippingVisibility(shippingAddressData.country_id);
                    });
                }
            });

            return this;
        },

        /**
         * Sets field visibility based on country
         */
        setBillingVisibility: function (countryValue, parentScope) {
            if (this.debug) {
                console.log('setBillingVisibility', countryValue);
            }
            if (!Utils.isEmpty(this.parentScope) && this.parentScope === parentScope) {
                this.setVisibility(countryValue, 'billing');
            }
        },
        setShippingVisibility: function (countryValue) {
            if (this.debug) {
                console.log('setShippingVisibility', countryValue);
            }
            if (!Utils.isEmpty(this.customScope) && this.customScope === 'shippingAddress') {
                this.setVisibility(countryValue, 'shipping');
            }
        },
        setVisibility: function (countryValue, addressType) {
            if (this.debug) {
                console.log("setVisibility from country select: "+countryValue+"@"+addressType);
            }
            if (this.vatFrontendVisibility === true
                && $.isArray(this.allowedCountries)
                && $.inArray(countryValue, this.allowedCountries) !== -1
            ) {
                this.visible(true);

            } else {
                this.value('');
                this.visible(false);
            }
        },

        setCssClasses: function () {
            if (this.classes === null) {
                var classes = ['input-text'];
                for (var property in this.validation) {
                    if (this.validation.hasOwnProperty(property)) {
                        classes.push(property);
                    }
                }
                this.classes = "";
                classes.forEach(function (name) {
                    this.classes += " "+name;
                }, this);
            }
            this.classes = this.classes.trim();
            if (this.debug) {
                console.log("co classes", this.classes);
            }
        },

        afterValidation: function (jqXHR) {
            var self = this;
            queue.addFunction(function () {
                if (self.debug) {
                    console.log("co::updateCountry", self.countryCode);
                }
                var deferred = new $.Deferred();
                if (self.countryCode.length > 0) {
                    $('body').trigger('processStop');
                    return self.updateCountry(self.countryCode, deferred);
                }
            });

            queue.addFunction(function () {
                if (self.debug) {
                    console.log("co::checkout.iosc.ajax");
                }
                uiRegistry.async("checkout.iosc.ajax")(
                    function (ajax) {
                        ajax.update();
                    }
                );
            });

            queue.addFunction(function () {
                if (self.debug) {
                    console.log("co-reloader::totals");
                }
                Reloader.totals();
            });

            return queue.run();
        }

    });
});