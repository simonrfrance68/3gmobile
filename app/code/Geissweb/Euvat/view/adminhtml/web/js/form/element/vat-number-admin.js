/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

define([
    'jquery',
    'Geissweb_Euvat/js/form/element/vat-number-base',
    'Magento_Ui/js/modal/alert',
    'Magento_Ui/js/lib/validation/validator',
    'mage/translate',
    'mageUtils'
], function ($, VatNumberBase, alert, validator, $t, Utils) {
    'use strict';

    return VatNumberBase.extend({

        defaults: {
            isAdminhtml: true,
            addressId: '',
            template: 'ui/form/field',
            elementTmpl: 'ui/form/element/input',
            validation: {}
        },

        initialize: function (options) {
            this._super();
            this.setVisibility();
            return this;
        },

        /**
         * Sets initial visibility
         */
        setVisibility: function () {
            this.visible(true);
        },

        /**
         * AJAX validation of the VAT number
         * @param vatNumber
         */
        validateVatNumber: function (vatNumber) {
            if (this.debug) {
                console.log("admin validateVatNumber("+vatNumber+")");
            }
            $('body').trigger('processStart');

            var self = this;
            var valid = false;
            var formKey;
            self.isValidated(false);

            if (typeof(window.FORM_KEY) !== 'undefined' && window.FORM_KEY.length > 0) {
                formKey = window.FORM_KEY;
            }

            $.ajax({
                type: 'POST',
                url: self.validationUrl,
                data: {
                    vat_number: vatNumber,
                    form_key: formKey,
                    handle: self.handle
                },

                success: function (response) {
                    self.clearMessages();
                    self.response(response);
                    self.isValidated(true);
                    self.validatedNumber(vatNumber);

                    if (response.vat_is_valid === true) {
                        valid = true;
                        self.isValidVatNumber(true);
                        self.success($t(response.request_message));
                        self.successForId(self.successId);

                    } else {
                        valid = false;
                        self.isValidVatNumber(false);
                        if (response.warning === true) {
                            self.retry = true;
                            self.warn($t(response.request_message));
                        } else {
                            self.error($t(response.request_message));
                        }
                    }
                },

                error: function (response) {
                    valid = false;
                    self.isValidated(false);
                    self.isValidVatNumber(false);
                    self.response(response);
                    self.retry = true;
                    self.warn($t('Error during VAT number validation request.'));
                },

                always: function () {
                    $('body').trigger('processStop');
                }

            }).then(function (data, textStatus, jqXHR) {
                self.afterValidation(jqXHR);
            }).done(function () {
                self.isValidated(true);
                $('body').trigger('processStop');
                return {
                    valid: valid,
                    target: self
                };
            });

        },

        afterValidation: function (jqXHR) {
            var self = this;
            jqXHR.then(function () {
                if (typeof(self.response()) === 'object') {
                    var resp = self.response();
                    if (resp.vat_trader_name === null) {
                        resp.vat_trader_name = "Not part of the validation response.";
                    }
                    if (typeof(resp.vat_trader_address) === 'undefined') {
                        resp.vat_trader_address = "Not part of the validation response.";
                    }

                    alert({
                        title: $t('VAT number validation result'),
                        content: $t(resp.request_message)
                        +"<br/>"+"<br/>"
                        +$t('Trader Name: ')+resp.vat_trader_name
                        +"<br/>"
                        +$t('Trader Address: ')+resp.vat_trader_address
                        +"<br/>"+"<br/>"
                        +$t('Request Date: ')+resp.vat_request_date
                        +"<br/>"
                        +$t('Request Identifier: ')+resp.vat_request_id
                    });
                }
            });
        },

        /**
         * Check if number can be validated and validate it, show messages accordingly
         * @returns {*}
         */
        validate: function () {
            this.clearMessages();
            var value   = this.value();
            var countryCode = this.getCountry();
            var isValid = false;
            var message;

            if (this.debug) {
                console.log("admin validate() "+countryCode);
            }

            //syntax check first to lower request count to services
            if (this.isChanging && !Utils.isEmpty(value)) {

                if (value.match(new RegExp('^[A-Z][A-Z]'))) {
                    if (this.debug) {
                        console.log("admin validate, got countrycode");
                    }
                    countryCode = value.substr(0,2).toUpperCase();
                    this.setVatNumberCountry(countryCode);
                } else {
                    if (!Utils.isEmpty(countryCode)) {
                        value = countryCode+value;
                        this.value(value);
                        if (this.debug) {
                            console.log("admin validate, using new value: "+value);
                        }
                    } else {
                        message = $t('Please provide the country code prefix of the VAT number.');
                        this.source.set('params.invalid', true);
                        this.warn(message);
                        this.bubble('warn', message);
                    }
                }

                if (typeof(this.patterns[countryCode]) !== 'undefined') {
                    if (this.debug) {
                        console.log("using pattern "+this.patterns[countryCode]);
                    }
                    var regex = new RegExp(this.patterns[countryCode]);
                    if (regex.test(value)) {
                        this.passedRegex(true);
                        if (!this.isAdminhtml) {
                            $('input[name='+this.inputName+']').blur();
                        }
                        // AJAX validation
                        if (this.enableAjaxValidation === true) {
                            return this.validateVatNumber(value);
                        }

                    } else {
                        this.passedRegex(false);
                        if (this.debug) {
                            console.log("admin validate, format invalid");
                        }
                        isValid = false;
                        message = $t('The format of the VAT number is invalid for this country.');
                        this.source.set('params.invalid', true);
                        this.warn(message);
                        this.bubble('warn', message);
                    }

                } else {
                    if (this.debug) {
                        console.log("admin validate, no EU number");
                    }
                    isValid = false;
                    this.passedRegex(false);
                    this.error($t('This does not seem to be a EU VAT Number.'));
                    this.bubble('error', message);
                    if (!this.isOutOfUiScope) {
                        this.source.set('params.invalid', true);
                    }
                }

            }

            //regular validation
            var result  = validator(this.validation, value, this.validationParams);
            message = result.message;
            isValid = result.passed;
            this.error(message);
            this.bubble('error', message);
            if (this.debug) {
                console.log("admin validate, regular validation result", result);
            }

            if (!isValid && !this.isOutOfUiScope) {
                this.source.set('params.invalid', true);
            }
            return {
                valid: isValid,
                target: this
            };
        }



    });
});