<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Model\Validation;

use Magento\Framework\Exception\LocalizedException;

/**
 * Class Vies
 * @package Geissweb\Euvat\Model\Validation
 */
class Vies extends Base
{
    /**
     * Endpoint to connect to
     * @var $serviceUrl
     */
    var $serviceUrl = 'http://ec.europa.eu/taxation_customs/vies/checkVatService.wsdl';

    /**
     * @var \SoapClient
     */
    public $soapClient;


    /**
     * Connects to EU VIES
     * @return void
     */
    public function connect()
    {
        if (!extension_loaded('soap')) {
            $this->logger->critical(new LocalizedException(__('PHP SOAP extension is required.')));
        }
        $this->soapClient = $this->getSoapClient();
    }

    /**
     * Validate VAT number
     * @return void
     * @throws LocalizedException
     */
    public function validate()
    {
        try {
            $requesterCountryCode = $this->getParam('requesterCountryCode');
            $requesterVatNumber = $this->getParam('requesterVatNumber');

            if (!empty($requesterCountryCode) && !empty($requesterVatNumber)) {
                $response = $this->soapClient->checkVatApprox($this->params);
            } else {
                $response = $this->soapClient->checkVat($this->params);
            }

            if (get_class($response) !== 'SoapFault') {
                $this->logger->debug('Class of VIES Response', [get_class($response)]);
                $this->logger->debug('Response Data', (array)$response);
            }

            $this->buildResult($response);

            $this->eventManager->dispatch('vat_validation_after', [
                'validation_result' => $this->validationResult
            ]);

        } catch (\SoapFault $e) {

            $this->logger->debug('[Validation] SoapFault with params', $this->params);

            $response = new \stdClass();
            $response->countryCode = $this->getParam('countryCode');
            $response->vatNumber = $this->getParam('vatNumber');
            $response->requestDate = date("Y-m-d H:i:s", time());
            $response->valid = false;
            $response->traderName = false;
            $response->traderAddress = false;
            $response->traderCompanyType = false;
            $response->requestIdentifier = false;
            $response->message = $e->faultstring;

            $this->buildResult($response);
        }
    }

    /**
     * Adds data to $this->validationResult
     *
     * @param \stdClass $result
     *
     * @return void
     * @throws LocalizedException
     */
    public function buildResult($result)
    {
        $this->logger->debug("[Validation] Building result based of values: ".var_export($result, true));
        $this->validationResult->setVatRequestSuccess(true);

        foreach ($result as $key => $value) {
            switch ($key) {
                case 'valid':
                    $this->validationResult->setVatIsValid($value);
                    break;
                case 'countryCode':
                    $this->validationResult->setVatRequestCountryCode($value);
                    break;
                case 'vatNumber':
                    $this->validationResult->setVatId($value);
                    break;
                case 'requestDate':
                    $this->validationResult->setVatRequestDate(date("Y-m-d H:i:s", time()));
                    break;
                case 'traderName':
                    $this->validationResult->setVatTraderName($value);
                    break;
                case 'traderAddress':
                    $this->validationResult->setVatTraderAddress($value);
                    break;
                case 'requestIdentifier':
                    $this->validationResult->setVatRequestId($value);
                    break;
                case 'traderCompanyType':
                    $this->validationResult->setVatTraderCompanyType($value);
                    break;
                case 'message':
                    switch ($value) {
                        case 'INVALID_REQUESTER_INFO':
                        case 'Empty Requester VAT number':
                            $this->validationResult->setRequestMessage(__('Invalid requester information. Please check your merchant VAT number.'));
                            $this->validationResult->setError(true);
                            break;
                        case 'MS_UNAVAILABLE':
                            $this->validationResult->setRequestMessage(__('Currently it is not possible to validate VAT numbers from this country.'));
                            $this->validationResult->setWarning(true);
                            break;
                        case 'TIMEOUT':
                            $this->validationResult->setRequestMessage(__('The connection to the validation interface timed out. Please try again.'));
                            $this->validationResult->setWarning(true);
                            break;
                        case 'Invalid_input':
                            $this->validationResult->setRequestMessage(__('The VAT number is invalid.'));
                            $this->validationResult->setError(true);
                            break;
                        case 'GLOBAL_MAX_CONCURRENT_REQ':
                        case 'MS_MAX_CONCURRENT_REQ':
                            $this->validationResult->setRequestMessage(__('The VAT number validation service is busy.'));
                            $this->validationResult->setWarning(true);
                            break;
                        default:
                            $this->validationResult->setRequestMessage(__($value));
                            break;
                    }
                    $this->validationResult->setData($key, $value);
                    break;
                default:
                    $this->validationResult->setData($key, $value);
                    break;
            }
        }

        $reqMsg = $this->validationResult->getRequestMessage();

        if ($this->validationResult->getVatIsValid()) {
            $this->validationResult->setRequestMessage(__('The VAT number is valid.'));
            //$this->messager->addSuccessMessage($this->validationResult->getData('request_message'));
        } elseif (empty($reqMsg)) {
            $this->validationResult->setRequestMessage(__('The VAT number is invalid.'));
            //$this->messager->addErrorMessage($this->validationResult->getData('request_message'));
        }
    }

    /**
     * Create SOAP client based on VAT validation service WSDL
     * @return \SoapClient
     * @throws \SoapFault
     */
    protected function getSoapClient()
    {
        if ($this->configHelper->getIsIpv6Compat()) {

            $opts = ['socket' => ['bindto' => $this->configHelper->getIPv4ToBindOn().':0']];
            $context = stream_context_create($opts);
            return new \SoapClient($this->serviceUrl, [
                    'exceptions'     => 0,
                    'trace'         => false,
                    'cache_wsdl'     => WSDL_CACHE_MEMORY,
                    'soap_version'     => SOAP_1_1,
                    'user_agent'     => 'Magento2 Webshop',
                    'stream_context'=> $context
                ]);

        } else {

            return new \SoapClient($this->serviceUrl, [
                'soap_version'    => SOAP_1_1,
                'user_agent'     => 'Magento2 Webshop',
                'cache_wsdl'    => WSDL_CACHE_MEMORY,
                'trace'         => false,
            ]);

        }
    }
}
