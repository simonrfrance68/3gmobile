<?php
/**
 * ||GEISSWEB| EU VAT Enhanced
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the GEISSWEB End User License Agreement
 * that is available through the world-wide-web at this URL: https://www.geissweb.de/legal-information/eula
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to update the extension in the future. If you wish to customize the extension
 * for your needs please refer to our support for more information.
 *
 * @package     Geissweb_Euvat
 * @copyright   Copyright (c) 2015-2019 GEISS WeblÃ¶sungen (https://www.geissweb.de)
 * @license     https://www.geissweb.de/legal-information/eula GEISSWEB End User License Agreement
 */

namespace Geissweb\Euvat\Model\Validation;

use Geissweb\Euvat\Logger\Logger;
use Magento\Framework\DataObject;

/**
 * Class Base
 * @package Geissweb\Euvat\Model\Validation
 */
class Base
{
    /**
     * Endpoint to connect to
     * @var $serviceUrl
     */
    public $serviceUrl;

    /**
     * Service client
     * @var $client
     */
    public $client;

    /**
     * Logger
     * @var Logger
     */
    public $logger;

    /**
     * Holder for validation params
     * @var array
     */
    public $params = [];

    /**
     * Service result
     * @var \Geissweb\Euvat\Api\Data\ValidationResultInterface
     */
    public $validationResult;

    /**
     * @var \Magento\Checkout\Model\Session
     */
    public $checkoutSession;

    /**
     * @var ResultFactory
     */
    public $validationResultFactory;

    /**
     * @var \Magento\Framework\App\Request\Http
     */
    public $request;

    /**
     * @var \Geissweb\Euvat\Helper\Configuration
     */
    public $configHelper;

    /**
     * @var \Magento\Framework\Event\Manager
     */
    public $eventManager;

    /**
     * @var \Magento\Framework\Message\ManagerInterface
     */
    public $messager;

    /**
     * Service constructor
     *
     * @param \Geissweb\Euvat\Logger\Logger                  $logger
     * @param \Geissweb\Euvat\Helper\Configuration           $configHelper
     * @param \Magento\Framework\Message\ManagerInterface    $messager
     * @param \Magento\Framework\Event\Manager               $eventManager
     * @param \Magento\Framework\App\Request\Http            $request
     * @param \Magento\Checkout\Model\Session                $checkoutSession
     * @param \Geissweb\Euvat\Model\Validation\ResultFactory $validationResultFactory
     *
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function __construct(
        \Geissweb\Euvat\Logger\Logger $logger,
        \Geissweb\Euvat\Helper\Configuration $configHelper,
        \Magento\Framework\Message\ManagerInterface $messager,
        \Magento\Framework\Event\Manager $eventManager,
        \Magento\Framework\App\Request\Http $request,
        \Magento\Checkout\Model\Session $checkoutSession,
        \Geissweb\Euvat\Model\Validation\ResultFactory $validationResultFactory
    ) {
        $this->logger = $logger;
        $this->configHelper = $configHelper;
        $this->messager = $messager;
        $this->eventManager = $eventManager;
        $this->request = $request;
        $this->checkoutSession = $checkoutSession;

        // Default validationResult
        /** @var \Geissweb\Euvat\Model\Validation\Result $this->validationResultFactory */
        $this->validationResultFactory = $validationResultFactory;
        $this->validationResult = $this->validationResultFactory->create();
        $this->validationResult
                    ->setRequesterCountryCode($this->configHelper->getMerchantCountryCode())
                    ->setRequesterNumber($this->configHelper->getMerchantVatNumber())
                    ->setHandle($this->request->getParam('handle'));

        $this->setParam('requesterCountryCode', $this->configHelper->getMerchantCountryCode(true));
        $this->setParam('requesterVatNumber', $this->configHelper->getMerchantVatNumber());
    }

    /**
     * Connects to service
     * @return void
     */
    public function connect()
    {
    }

    /**
     * Sets validation parameters
     *
     * @param string $key
     * @param string $value
     *
     * @return void
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function setParam($key, $value)
    {
        $this->params[$key] = $value;

        if ($key == 'vat_number') {
            $this->validationResult->setVatRequestNumber($value);
        }
    }

    /**
     * Gets validation parameters
     *
     * @param string $key
     * @return string
     */
    public function getParam($key)
    {
        return $this->params[$key];
    }

    /**
     * Gets validation parameters
     * @return array
     */
    public function getParams()
    {
        return $this->params;
    }

    /**
     * Returns validation result
     * @return \Geissweb\Euvat\Api\Data\ValidationResultInterface
     */
    public function getResult()
    {
        //If we have a warning it means that the interface or member state is down
        if ($this->validationResult->getWarning()
            && $this->configHelper->isOfflineValidationEnabled()
            && $this->configHelper->isOfflineValidationCountry($this->params['countryCode'])
        ) {
            $this->logger->debug("[Validation] Offline validation enabled for ".$this->params['countryCode']." (".$this->validationResult->getRequestMessage().")");
            return $this->getOfflineResult();
        }
        return $this->validationResult;
    }

    /**
     * Returns offline validation result
     * @return \Geissweb\Euvat\Api\Data\ValidationResultInterface
     */
    public function getOfflineResult()
    {
        /** @var \Geissweb\Euvat\Api\Data\ValidationResultInterface $offlineValidationResult */
        $offlineValidationResult = $this->validationResultFactory->create();
        $offlineValidationResult->setRequesterCountryCode($this->configHelper->getMerchantCountryCode());
        $offlineValidationResult->setRequesterNumber($this->configHelper->getMerchantVatNumber());
        $offlineValidationResult->setHandle($this->request->getParam('handle'));

        $offlineValidationResult->setVatId($this->params['countryCode'].$this->params['vatNumber']);
        $offlineValidationResult->setVatIsValid(true);
        $offlineValidationResult->setVatRequestCountryCode($this->params['countryCode']);
        $offlineValidationResult->setVatRequestDate(date("Y-m-d H:i:s"));
        $offlineValidationResult->setVatRequestId('OFFLINE');
        $offlineValidationResult->setVatRequestSuccess(false);
        $offlineValidationResult->setVatTraderName('');
        $offlineValidationResult->setVatTraderAddress('');
        $offlineValidationResult->setVatTraderCompanyType('');

        $offlineValidationResult->setRequestMessage(__('The VAT number is valid.'));

        return $offlineValidationResult;
    }


    /**
     * Check if service is online
     * @return bool
     */
    public function isOnline()
    {
        $cs = curl_init();
        curl_setopt($cs, CURLOPT_URL, $this->serviceUrl);
        curl_setopt($cs, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($cs, CURLOPT_VERBOSE, false);
        curl_setopt($cs, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);
        curl_setopt($cs, CURLOPT_TIMEOUT, 15);
        curl_exec($cs);
        $httpcode = curl_getinfo($cs, CURLINFO_HTTP_CODE);
        curl_close($cs);
        if ($httpcode == "200") {
            return true;
        } else {
            $this->logger->debug("BaseValidation service is offline");
            return false;
        }
    }

    /**
     * Basic syntax VAT number check
     * @param string $vatNumber
     * @param string $countryCode
     *
     * @return bool
     */
    public function isSyntaxValid($vatNumber = '', $countryCode = '')
    {
        if ($vatNumber != '' && $countryCode != '') {

            // based on http://ec.europa.eu/taxation_customs/vies/faq.html#item_11
            $regex = '';
            switch ($countryCode) {
                case 'AT': // Austria
                    $regex = '(AT)?U[0-9]{8}';
                    break;
                case 'BE': // Belgium
                    $regex = '(BE)?0[0-9]{9}';
                    break;
                case 'BG': // Bulgaria
                    $regex = '(BG)?[0-9]{9,10}';
                    break;
                case 'CY': // Cyprus
                    $regex = '(CY)?[0-9]{8}[A-Z]';
                    break;
                case 'CZ': // Czech Republic
                    $regex = '(CZ)?[0-9]{8,10}';
                    break;
                case 'DE': // Germany
                    $regex = '(DE)?[0-9]{9}';
                    break;
                case 'DK': // Denmark
                    $regex = '(DK)?[0-9]{8}';
                    break;
                case 'EE': // Estonia
                    $regex = '(EE)?[0-9]{9}';
                    break;
                case 'EL': // Greece
                case 'GR': // Greece
                    $regex = '(EL|GR)?[0-9]{9}';
                    break;
                case 'ES': // Spain
                    $regex = '(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]';
                    break;
                case 'FI': // Finland
                    $regex = '(FI)?[0-9]{8}';
                    break;
                case 'FR': // France
                    $regex = '(FR)?[0-9A-Z]{2}[0-9]{9}';
                    break;
                case 'GB': // United Kingdom
                    $regex = '(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})';
                    break;
                case 'HR': // Croatia
                    $regex = '(HR)?[0-9]{11}';
                    break;
                case 'HU': // Hungary
                    $regex = '(HU)?[0-9]{8}';
                    break;
                case 'IE': // Ireland
                    $regex = '(IE)?(([0-9]{7}WI|[0-9][0-9A-Z\*\+][0-9]{5}[A-Z]{1,2}))';
                    break;
                case 'IT': // Italy
                    $regex = '(IT)?[0-9]{11}';
                    break;
                case 'LT': // Lithuania
                    $regex = '(LT)?([0-9]{9}|[0-9]{12})';
                    break;
                case 'LU': // Luxembourg
                    $regex = '(LU)?[0-9]{8}';
                    break;
                case 'LV': // Latvia
                    $regex = '(LV)?[0-9]{11}';
                    break;
                case 'MT': // Malta
                    $regex = '(MT)?[0-9]{8}';
                    break;
                case 'NL': // Netherlands
                    $regex = '(NL)?[0-9]{9}B[0-9]{2}';
                    break;
                case 'PL': // Poland
                    $regex = '(PL)?[0-9]{10}';
                    break;
                case 'PT': // Portugal
                    $regex = '(PT)?[0-9]{9}';
                    break;
                case 'RO': // Romania
                    $regex = '(RO)?[0-9]{2,10}';
                    break;
                case 'SE': // Sweden
                    $regex = '(SE)?[0-9]{12}';
                    break;
                case 'SI': // Slovenia
                    $regex = '(SI)?[0-9]{8}';
                    break;
                case 'SK': // Slovakia
                    $regex = '(SK)?[0-9]{10}';
                    break;
                default:
                    break;
            }

            if (preg_match('/^' . $regex . '$/i', $vatNumber)) {
                return true;
            } else {
                $this->logger->debug("baseValidation $vatNumber is wrong syntax");
            }
        }

        return false;
    }
}
